[{"F:\\Piletas\\piletas\\src\\index.js":"1","F:\\Piletas\\piletas\\src\\App.js":"2","F:\\Piletas\\piletas\\src\\reportWebVitals.js":"3","F:\\Piletas\\piletas\\src\\Estilos.js":"4","F:\\Piletas\\piletas\\src\\Componentes\\formulario.js":"5","F:\\Piletas\\piletas\\src\\Componentes\\listado.js":"6","F:\\Piletas\\piletas\\src\\Componentes\\notificacion.js":"7","F:\\Piletas\\piletas\\src\\Componentes\\alerta.js":"8","F:\\Piletas\\piletas\\src\\Componentes\\sesion.js":"9","F:\\Piletas\\piletas\\src\\Componentes\\nav.js":"10","F:\\Piletas\\piletas\\src\\Componentes\\Formulario.js":"11","F:\\Piletas\\piletas\\src\\Componentes\\Listado.js":"12","F:\\Piletas\\piletas\\src\\Componentes\\Sesion.js":"13","F:\\Piletas\\piletas\\src\\Componentes\\Nav.js":"14","F:\\Piletas\\piletas\\src\\Componentes\\Alerta.js":"15","F:\\Piletas\\piletas\\src\\Componentes\\Notificacion.js":"16","F:\\Piletas\\piletas\\src\\Componentes\\Deporte.js":"17","F:\\Piletas\\piletas\\src\\Componentes\\ListadoDeporte.js":"18","F:\\Piletas\\piletas\\src\\Componentes\\pdf-comprobante.js":"19","F:\\Piletas\\piletas\\src\\Componentes\\ObtenerComprobante.js":"20","F:\\Piletas\\piletas\\src\\Componentes\\pdf-listado.js":"21"},{"size":514,"mtime":1612218146755,"results":"22","hashOfConfig":"23"},{"size":5428,"mtime":1615253198550,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1611795282164,"results":"25","hashOfConfig":"23"},{"size":3510,"mtime":1612402448823,"results":"26","hashOfConfig":"23"},{"size":27607,"mtime":1612569662136,"results":"27","hashOfConfig":"23"},{"size":10191,"mtime":1612567393956,"results":"28","hashOfConfig":"23"},{"size":1063,"mtime":1612412673826,"results":"29","hashOfConfig":"23"},{"size":896,"mtime":1612396451807,"results":"30","hashOfConfig":"23"},{"size":4357,"mtime":1612567411548,"results":"31","hashOfConfig":"23"},{"size":1474,"mtime":1612569004076,"results":"32","hashOfConfig":"23"},{"size":32791,"mtime":1615253475843,"results":"33","hashOfConfig":"23"},{"size":13612,"mtime":1615245353695,"results":"34","hashOfConfig":"23"},{"size":4231,"mtime":1613075749338,"results":"35","hashOfConfig":"23"},{"size":2014,"mtime":1613144882211,"results":"36","hashOfConfig":"23"},{"size":921,"mtime":1613683144573,"results":"37","hashOfConfig":"23"},{"size":1065,"mtime":1612571474534,"results":"38","hashOfConfig":"23"},{"size":43243,"mtime":1614968522880,"results":"39","hashOfConfig":"23"},{"size":9827,"mtime":1613683144573,"results":"40","hashOfConfig":"23"},{"size":6413,"mtime":1615244385651,"results":"41","hashOfConfig":"23"},{"size":4588,"mtime":1615244579688,"results":"42","hashOfConfig":"23"},{"size":6312,"mtime":1615251623746,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"z21pu",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Piletas\\piletas\\src\\index.js",[],["94","95"],"F:\\Piletas\\piletas\\src\\App.js",["96"],"F:\\Piletas\\piletas\\src\\reportWebVitals.js",[],"F:\\Piletas\\piletas\\src\\Estilos.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\formulario.js",["97","98","99","100","101","102","103","104"],"import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {LinearProgress,InputLabel, Checkbox,FormControlLabel, Typography, Radio, RadioGroup, TextField, FormControl, Button, Paper, Grid, Select, MenuItem, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport Cargando from '@material-ui/core/LinearProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Estilos from '../Estilos.js';\r\nimport Notificacion from './notificacion.js'\r\nimport AlertaMensaje from './alerta.js'\r\n\r\n\r\n//Componente utilizado para crear o modificar publicaciones o solicitudes de servicios\r\nexport default function Inicio({ruta}) {\r\n    const [siguiente, setsiguiente] = useState(false);\r\n    \r\n    return ( \r\n        siguiente?<Formulario setsiguiente={setsiguiente} ruta={ruta}/>:<Condiciones setsiguiente={setsiguiente}/>\r\n    );\r\n}\r\n\r\nconst Condiciones = ({setsiguiente}) => {\r\n    const classes = Estilos();\r\n\r\n    return (\r\n        <div className={classes.fondo}>\r\n            <Paper elevation={3} style={{padding: \"20px\", background:\"lightblue\", maxWidth:\"1600px\"}} className=\"Fondo\">\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" component=\"h1\" align=\"center\">\r\n                            Condiciones para realizar una reserva para las piletas\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <ul style={{textAlign:\"left\",textJustify:\"auto\"}}>\r\n                            <li>Los días habilitados para asistir al complejo son de martes a domingo. El horario de apertura del complejo es de 14 a 00 hs, y el sector de las piletas cierra a las 20 hs.</li>\r\n                            <li>Al momento de ingresar al complejo, debe presentar su DNI y un certificado de buena salud expedido por un organismo público.</li>\r\n                            <li>Luego de realizado una reserva, deberá esperar 48 horas para poder realizar otra.</li>\r\n                            <li>La entrada al complejo es totalmente gratuita.</li>\r\n                            <li>Para poder realizar una reserva, debe tener un domicilio real en San Bernardo que pueda ser comprobado mediante su DNI.</li>\r\n                            <li>En caso de no poseer un domicilio en San Bernardo y estar vacacionando en nuestra ciudad, deberás presentar también una fotocopia del documento de la persona con la que te estás alojando.</li>\r\n                            <li>Si realizas una reserva 72 horas antes de asistir al complejo, deberás realizar una actualización de la declaración jurada al momento de ingresar.</li>\r\n                        <br/></ul>       \r\n                    </Grid>      \r\n                    <Button className={classes.botones} onClick={()=>{setsiguiente(true)}} size=\"large\" variant=\"contained\" color=\"secondary\">Siguiente</Button>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Alerta({funcionAceptar, persona, turno}) {\r\n    const [open, setOpen] = useState(true);\r\n    const [cargando, setcargando] = useState(false)\r\n    const [noEsta, setnoEsta] = useState(persona.nombre===\"\")\r\n    //Ejecutamos la función que se pasa como parámetro\r\n    const handleClose = (boole) => {\r\n      setcargando(true)\r\n      funcionAceptar(boole)\r\n      setcargando(false)\r\n      setOpen(false);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          onClose={()=>{handleClose(false)}}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{noEsta?\"DNI no encontrado\":\"Por favor, confirme que sus datos sean correctos\"}</DialogTitle>\r\n          <DialogContent>\r\n            {!noEsta && <DialogContentText id=\"alert-dialog-description\">\r\n                Nombre: {persona.nombre}<br/>\r\n                Apellido: {persona.apellido}<br/>\r\n                DNI: {persona.dni}<br/>\r\n                Telefono: {persona.telefono}<br/>\r\n                {persona.domicilio?\"Situación: Soy turista\":\"Localidad: San Bernardo\"}<br/>\r\n                Fecha reservada: {turno.fecha}<br/>\r\n                Área: {turno.area===0?\"Pileta\":(turno.area===1?\"Camping\":\"Camping y pileta\")}\r\n            </DialogContentText>}\r\n            {noEsta && <DialogContentText id=\"alert-dialog-description\">\r\n                El DNI introducido no se encuentra registrado. Por favor, ingrese todos sus datos destildando la opción \"Ya he realizado una reserva alguna vez\".\r\n            </DialogContentText>}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={()=>{handleClose(false)}} variant=\"contained\" color=\"secondary\">\r\n              Cancelar\r\n            </Button>\r\n            <Button onClick={()=>{handleClose(true)}} variant=\"contained\" style={{background:\"lightgreen\"}} disabled={noEsta} autoFocus>\r\n              Confirmar\r\n            </Button>\r\n            {cargando && <Cargando/>}\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n\r\nconst Formulario = ({setsiguiente, ruta, usuario}) =>{\r\n    const classes = Estilos();\r\n\r\n    const [cargando, setcargando] = useState(false);\r\n    const [abrirConfirmacion, setabrirConfirmacion] = useState(false);\r\n    const [alertaDNI, setalertaDNI] = useState(false);\r\n    const [tildado, settildado] = useState(false);\r\n    const [mensaje, setmensaje] = useState(\"\");\r\n    const [tildadoCovid, settildadoCovid] = useState(false);\r\n    const [disponibles, setdisponibles] = useState(-1);\r\n    const [esperaDisponible, setesperaDisponible] = useState(false);\r\n    const [notificar, setnotificar] = useState(false);\r\n    const [fechaHoy, setfechaHoy] = useState(\"\");\r\n    const [turista, setturista] = useState(false);\r\n    const [abrirAlerta, setabrirAlerta] = useState(false);\r\n\r\n    const [cargandoSolicitar, setcargandoSolicitar] = useState(false);\r\n\r\n    //Datos de la pagina\r\n    const [persona, setpersona] = useState({\r\n        dni: \"\",\r\n        nombre:\"\",\r\n        apellido: \"\",\r\n        domicilio: \"San Bernardo\",\r\n        telefono: \"\",\r\n        dni_alojado: \"\",\r\n        nombre_alojado:\"\",\r\n        apellido_alojado: \"\",\r\n        domicilio_alojado: \"\"\r\n    }); \r\n    \r\n    const [turno, setturno] = useState({\r\n        fecha: \"\",\r\n        area: 2,\r\n        asistencia: false,\r\n        declarado: false,\r\n        persona: null\r\n    });\r\n\r\n    useEffect(()=>{\r\n        let date_ = new Date();\r\n        let mes = date_.getMonth() + 1\r\n        if(mes < 10)\r\n            mes = \"0\"+mes\r\n        let dia = date_.getDay()\r\n        if(dia < 10)\r\n            dia = \"0\"+dia\r\n        \r\n        setfechaHoy(date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n        setturno({\r\n            ...turno,\r\n            fecha: date_.getFullYear()+\"-\"+mes+\"-\"+dia\r\n        })\r\n\r\n        setesperaDisponible(true)\r\n        axios.get(ruta+'/turnos/count?fecha='+date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n        .then(response => {\r\n            setdisponibles(100-response.data)\r\n            setesperaDisponible(false)\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        });\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if (alertaDNI)\r\n            setalertaDNI(false)\r\n    },[tildado])\r\n\r\n    function modificarInput(e){\r\n        if (alertaDNI){\r\n            setalertaDNI(false)\r\n        }\r\n        setpersona({\r\n            ...persona,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function seleccionarArea(e){\r\n        setturno({\r\n            ...turno,\r\n            area: Number(e.target.value)\r\n        })\r\n    }\r\n\r\n    function limpiarVariables(){\r\n        setpersona({\r\n            dni: \"\",\r\n            nombre:\"\",\r\n            apellido: \"\",\r\n            telefono: \"\",\r\n            domicilio: false,\r\n            dni_alojado: \"\",\r\n            nombre_alojado:\"\",\r\n            apellido_alojado: \"\",\r\n            domicilio_alojado: \"\"\r\n        });\r\n\r\n        setturno({\r\n            fecha: turno.fecha,\r\n            area: 2,\r\n            asistencia: false,\r\n            declarado: false,\r\n            persona: null\r\n        });\r\n    }\r\n\r\n    function alertaPregunta(e){\r\n        e.preventDefault();\r\n        setcargandoSolicitar(true)\r\n\r\n        axios.get(ruta+'/personas?dni='+persona.dni)\r\n        .then(response => {\r\n            if(response.data.length === 0 || tildado===true){\r\n                if (tildado && response.data.length !== 0)\r\n                    setpersona({\r\n                        dni: response.data[0].dni,\r\n                        nombre: response.data[0].nombre,\r\n                        apellido: response.data[0].apellido,\r\n                        telefono: response.data[0].telefono,\r\n                        domicilio: response.data[0].domicilio,\r\n                    })\r\n                setcargandoSolicitar(true)\r\n                setabrirConfirmacion(true)\r\n                setcargandoSolicitar(false)\r\n            }else{\r\n                setalertaDNI(true)\r\n                setcargandoSolicitar(false)\r\n            }\r\n\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        });\r\n    }\r\n\r\n    function solicitarTurno(boole){\r\n        setabrirConfirmacion(false)\r\n        \r\n        if(boole){\r\n            let aux = persona.domicilio\r\n            let persona_aux = persona;\r\n            persona_aux.domicilio = aux;\r\n\r\n            axios.get(ruta+'/personas?dni='+persona.dni)\r\n            .then(response => {\r\n                if(response.data.length === 0){\r\n                    axios.post(ruta+'/personas', persona_aux)\r\n                    .then(response => {\r\n                        setcargandoSolicitar(false)\r\n\r\n                        let turno_aux = turno;\r\n                        turno_aux.persona = response.data.id;\r\n                        \r\n                        axios.post(ruta+'/turnos', turno_aux)\r\n                        .then(response => {\r\n                            setabrirAlerta(true)\r\n                            limpiarVariables()\r\n                            setdisponibles(disponibles-1)\r\n                        }).catch(error => {\r\n                            console.log(error.response)\r\n                        });\r\n\r\n                    }).catch(error => {\r\n                        setcargandoSolicitar(true)\r\n                        console.log(error.response)\r\n                    });\r\n                }else{\r\n                    let turno_aux = turno;\r\n                    turno_aux.persona = response.data[0].id;\r\n\r\n                    let posicion = response.data[0].turnos.length -1\r\n                    let ultTurno = new Date(response.data[0].turnos[posicion].fecha+\" 23:59:59\");\r\n                    let unDiaDespues = Date.parse(ultTurno) + 1000*60*60*24 //24 horas a milisegundos\r\n                    let dosDias = Date.parse(ultTurno) + 1000*60*60*36 //36 horas a milisegundos\r\n\r\n                    if (unDiaDespues>Date.now() && response.data[0].turnos.length!==0){\r\n                        setcargandoSolicitar(false)\r\n                        if (ultTurno<Date.now()){\r\n                            let permitido = new Date(dosDias)\r\n                            setmensaje(\"Debido a su último turno expedido, puede volver a realizar una reserva el día \"+permitido.getDay()+\"/\"+(permitido.getMonth()+1)+\"/\"+permitido.getFullYear())\r\n                        }else{\r\n                            let dia = ultTurno.getDate()\r\n                            let mes = ultTurno.getMonth() + 1\r\n                            let anio = ultTurno.getFullYear()\r\n\r\n                            if(mes < 10)\r\n                                mes = \"0\"+mes\r\n                            if (dia <10)\r\n                                dia = \"0\"+dia\r\n                            setmensaje(\"Usted tiene un turno activo para la fecha \"+`${dia}-${mes}-${anio}`+\". Si desea cancelarlo, comuníquese al correo complejodeportivosb@gmail.com.ar\")\r\n                        }\r\n                        setnotificar(true)\r\n                    }else{\r\n                        axios.post(ruta+'/turnos', turno_aux)\r\n                        .then(response => {\r\n                            setcargandoSolicitar(false)\r\n                            setabrirAlerta(true)\r\n                            setcargandoSolicitar(true)\r\n                            limpiarVariables()\r\n                            setdisponibles(disponibles-1)\r\n                            setcargandoSolicitar(false)\r\n                        }).catch(error => {\r\n                            setcargandoSolicitar(false)\r\n                            console.log(error.response)\r\n                        });\r\n                    }\r\n                }\r\n            }).catch(error => {\r\n                setcargandoSolicitar(false)\r\n                console.log(error.response)\r\n            });\r\n        }else{\r\n            setcargandoSolicitar(false)\r\n        }\r\n    }\r\n\r\n    function seleccionarFecha(e){\r\n        setturno({...turno, fecha: e.target.value})\r\n        setesperaDisponible(true)\r\n        let _fecha = new Date(e.target.value)\r\n        if (_fecha.getUTCDay()!==1){\r\n            axios.get(ruta+'/turnos/count?fecha='+e.target.value)\r\n            .then(response => {\r\n                setdisponibles(100-response.data)\r\n                setesperaDisponible(false)\r\n            }).catch(error => {\r\n                console.log(error.response)\r\n            });\r\n        }else{\r\n            setdisponibles(-2)//Cuando se selecciona un lunes\r\n            setesperaDisponible(false)\r\n        }\r\n    }\r\n    \r\n    function x(e){\r\n        const re = /^[0-9\\b]+$/;\r\n        if (e.target.value === '' || re.test(e.target.value)) {\r\n            this.setState({value: e.target.value})\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.fondo}>\r\n            <Paper elevation={3} style={{padding: \"10px\", background:\"lightblue\"}}>\r\n                <form onSubmit={alertaPregunta}>\r\n                    <FormControl color=\"primary\" fullWidth>\r\n                        <Grid className={classes.pantallaMedia} container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n                                    Turnos de pileta\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                                <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={tildado}\r\n                                        onChange={()=>{settildado(!tildado)}}\r\n                                        name=\"checkedF\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Ya he realizado una reserva alguna vez\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.dni}\r\n                                name=\"dni\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"DNI\"\r\n                                type=\"number\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>\r\n\r\n                            \r\n                            {!tildado && <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.nombre}\r\n                                name=\"nombre\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"Nombre\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>}\r\n\r\n                            {!tildado && <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.apellido}\r\n                                name=\"apellido\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"Apellido\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>}\r\n                                \r\n                            {!tildado && <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.telefono}\r\n                                    name=\"telefono\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Número de celular\"\r\n                                    type=\"number\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                />\r\n                            </Grid>}\r\n\r\n                            {!tildado && <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <FormControl className={classes.inputAncho}>\r\n                                    <InputLabel id=\"demo-simple-select-label\" style={{margin:\"7px 10px\"}}>Localidad</InputLabel>\r\n                                    <Select\r\n                                        value={persona.domicilio}\r\n                                        name=\"domicilio\"\r\n                                        onChange={modificarInput}\r\n                                        id=\"domicilio\"\r\n                                        variant=\"filled\"\r\n                                        required\r\n                                    >\r\n                                        <MenuItem value={false} onClick={()=>setturista(false)}>San Bernardo</MenuItem>\r\n                                        <MenuItem value={true} onClick={()=>setturista(true)}>Soy turista</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>}\r\n\r\n                            {/*Selecciona la opcion Soy turista */}\r\n                            {turista && !tildado && <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1} style={{margin:\"10px\"}}>\r\n                                <Alert variant=\"filled\" severity=\"info\">\r\n                                    Ingrese los datos de la persona con la cual se encuentra alojada. Al momento de asistir al complejo, deberá presentar una fotocopia del DNI de dicha persona.\r\n                                </Alert>\r\n\r\n                                <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.dni_alojado}\r\n                                    name=\"dni_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"DNI\"\r\n                                    type=\"number\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n\r\n                                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.nombre_alojado}\r\n                                    name=\"nombre_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Nombre\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n\r\n                                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.apellido_alojado}\r\n                                    name=\"apellido_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Apellido\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n\r\n                                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.domicilio_alojado}\r\n                                    name=\"domicilio_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Domicilio\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n                            </Grid>}\r\n\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <Typography align=\"center\" variant=\"h6\">\r\n                                    Seleccione la fecha a reservar\r\n                                </Typography>\r\n                                <input\r\n                                className={classes.inputAncho}\r\n                                onChange={seleccionarFecha}\r\n                                id=\"date\"\r\n                                type=\"date\"\r\n                                min={fechaHoy}\r\n                                required\r\n                                value={turno.fecha}\r\n                                style={{boxSizing: \"border-box\", padding:\"0px 10px\",background:\"rgba(0,0,0,.1)\", borderRadius:\"5px\",border:\"none\"}}/>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                {esperaDisponible && <LinearProgress color=\"secondary\"/>}\r\n                                <Typography color=\"secondary\"> {disponibles===-1?\"\":(disponibles===-2?\"Los días lunes no se puede reservar.\":`${disponibles} lugares disponibles`)} </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <FormControl component=\"fieldset\">\r\n                                    <RadioGroup aria-label=\"Turno\" name=\"turno\" value={String(turno.area)} onChange={seleccionarArea}>\r\n                                    <FormControlLabel value={\"0\"} control={<Radio />} label=\"Pileta\" />\r\n                                    <FormControlLabel value={\"1\"} control={<Radio />} label=\"Camping\" />\r\n                                    <FormControlLabel value={\"2\"} control={<Radio />} label=\"Ambos\" />\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <br/>\r\n                            <Typography variant=\"h4\" component=\"h4\" align=\"center\">\r\n                                Declaracion Jurada de Síntomas de COVID-19\r\n                            </Typography>                                \r\n\r\n                            <Grid item sm={12}>\r\n                                <img src=\"sintomas.jpg\" width=\"100%\"></img>\r\n                                <br/>\r\n                                <br/>\r\n                                <Typography fontWeight=\"fontWeightBold\" align=\"justify\">\r\n                                    Si tenés dos o más de los siguientes síntomas: fiebre de 37,5°C, tos, dolor de garganta, dificultad respiratoria, dolor muscular, cefalea, diarrea y/o vómitos, o si tenés solo pérdida brusca de gusto u olfato, comunicate al cel 3735604561 de 09 a 11hs y de 17 a 20 hs sin excepción.\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={tildadoCovid}\r\n                                    onChange={()=>{settildadoCovid(!tildadoCovid)}}\r\n                                    name=\"tildadoCovid\"\r\n                                    required\r\n                                />\r\n                            }\r\n                            label=\"Declaro bajo juramento que no tengo síntomas de COVID-19\"\r\n                            />\r\n                            <Grid item xs={12} className={classes.inputAncho}>\r\n                                {cargando && <Cargando/>}\r\n                            </Grid>\r\n\r\n                            \r\n                            <Grid item xs={12} align=\"center\" style={{margin:\"15px\"}}>\r\n                                {cargandoSolicitar && <LinearProgress color=\"secondary\"/>}\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.botones} onClick={()=>{setsiguiente(false)}} size=\"large\" variant=\"contained\" color=\"secondary\">Atras</Button>\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.botones} disabled={cargando || disponibles<=0} type=\"submit\" size=\"large\" variant=\"contained\" style={{background:\"lightgreen\"}}>Solicitar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {abrirConfirmacion && <Alerta funcionAceptar={solicitarTurno} persona={persona} turno={turno}/>}\r\n                        {notificar && <Notificacion funcionAceptar={setnotificar} mensaje={mensaje}/>}\r\n                        <AlertaMensaje mensaje={\"¡Turno creado exitosamente!\"} abrir={abrirAlerta} setabrir={setabrirAlerta}/>\r\n                    </FormControl>\r\n                </form>\r\n                {alertaDNI && <Alert variant=\"filled\" severity=\"error\">\r\n                    El DNI ya se encuentra en uso, seleccione \"Ya he realizado una reserva alguna vez\" para continuar con la reserva.\r\n                </Alert>}\r\n            </Paper>\r\n        </div>\r\n    )\r\n}",["105","106"],"F:\\Piletas\\piletas\\src\\Componentes\\listado.js",["107","108"],"import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {Box, Collapse, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Button, Typography, Paper, Grid } from '@material-ui/core';\r\nimport Cargando from '@material-ui/core/LinearProgress';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Estilos from '../Estilos.js';\r\nimport {Check as Si, Close as No} from '@material-ui/icons/';\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {    '& > *': {\r\n      borderBottom: 'unset',\r\n      padding:\"5px\",\r\n    },\r\n  },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction Row({turno, ruta, usuario}) {\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useRowStyles();\r\n  const [Turno, setTurno] = useState(turno);\r\n  const [juramento_dias, setjuramento_dias] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    let fecha = new Date(turno.fecha+\" 23:59:59\")\r\n    let fecha_turno = new Date(turno.created_at);\r\n    let dias = parseInt((fecha - fecha_turno)/1000/60/60/24);\r\n    \r\n    setjuramento_dias(dias>2)\r\n  },[])\r\n\r\n  let auth = 'Bearer '+usuario.jwt;\r\n\r\n  function asignarAsistencia(){\r\n    let asis = !Turno.asistencia;\r\n    axios.put(ruta+'/turnos/'+Turno.id,{\r\n      asistencia: asis\r\n    },{headers: {'Authorization': auth}})\r\n    .then(response => {\r\n      console.log(response.data)\r\n      setTurno({\r\n        ...Turno,\r\n        asistencia: !Turno.asistencia\r\n      })\r\n    }).catch(error => {\r\n      console.log(error.response)\r\n    });\r\n  }\r\n\r\n  function asignarDeclaracion(){\r\n    let dec = !Turno.declarado;\r\n    axios.put(ruta+'/turnos/'+Turno.id,{\r\n      declarado: dec\r\n    },{headers: {'Authorization': auth}})\r\n    .then(response => {\r\n      console.log(response.data)\r\n      setTurno({\r\n        ...Turno,\r\n        declarado: !Turno.declarado\r\n      })\r\n    }).catch(error => {\r\n      console.log(error.response)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledTableRow className={classes.root}>\r\n        <StyledTableCell align=\"left\" component=\"th\" scope=\"row\" onClick={() => setOpen(!open)}>\r\n          <IconButton aria-label=\"expand row\" size=\"small\" >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n          {`${Turno.persona.apellido} ${Turno.persona.nombre}`}\r\n        </StyledTableCell>\r\n        <StyledTableCell align=\"center\">{Turno.persona.dni}</StyledTableCell>\r\n        <StyledTableCell align=\"center\">\r\n          <Button size=\"small\" variant=\"contained\" style={{margin:\"5px\",}} color={Turno.asistencia?\"primary\":\"secondary\"} onClick={asignarAsistencia}>{Turno.asistencia?\"Si\":\"No\"}</Button>\r\n          {juramento_dias && <Button size=\"small\" variant=\"contained\" color={Turno.declarado?\"primary\":\"secondary\"} onClick={asignarDeclaracion}>{Turno.declarado?<Si/>:<No/>}</Button>}\r\n        </StyledTableCell>\r\n\r\n      </StyledTableRow>\r\n      <StyledTableRow>\r\n        <StyledTableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box>\r\n              <Grid container>\r\n                <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                  <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                    Teléfono: {Turno.persona.telefono!==\"\"?Turno.persona.telefono:\"N/A\"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                  <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                    {Turno.persona.domicilio?\" Localidad: San Bernardo\":\" Situación: Turista\"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                  <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                    Área: {Turno.persona.area===0?\"Pileta\":Turno.persona.area===1?\"Camping\":\"Pileta y camping\"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                  <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                    Fecha de solicitud: {}{Turno.created_at.split(\"T\")[0]}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Collapse>\r\n        </StyledTableCell>\r\n      </StyledTableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default function Listado({ruta,usuario}) {\r\n  const classes = Estilos();\r\n  const [fechaHoy, setfechaHoy] = useState(\"\");\r\n  const [mensaje, setmensaje] = useState(\"\");\r\n  const [esperaDisponible, setesperaDisponible] = useState(false);\r\n  const [turnos, setturnos] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    let date_ = new Date();\r\n    let mes = date_.getMonth() + 1\r\n    if(mes < 10)\r\n        mes = \"0\"+mes\r\n    let dia = date_.getDay()\r\n    if(dia < 10)\r\n        dia = \"0\"+dia\r\n    \r\n    setfechaHoy(date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n\r\n    setesperaDisponible(true)\r\n    axios.get(ruta+'/turnos?fecha='+date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n    .then(response => {\r\n      let turnos_ordenados = response.data;\r\n      // array temporal contiene objetos con posición y valor de ordenamiento\r\n      var arregloAux = turnos_ordenados.map(function(arreglo, i) {\r\n        return { index: i, value: arreglo.persona.apellido.toLowerCase() };\r\n      })\r\n      // ordenando el array mapeado que contiene los valores reducidos\r\n      arregloAux.sort(function(a, b) {\r\n        if (a.value > b.value) {\r\n          return 1;\r\n        }\r\n        if (a.value < b.value) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      // contenedor para el orden resultante\r\n      var resultado = arregloAux.map(function(arreglo){\r\n        return turnos_ordenados[arreglo.index];\r\n      });\r\n      setturnos(resultado)\r\n      setesperaDisponible(false)\r\n    }).catch(error => {\r\n        console.log(error.response)\r\n    });\r\n  },[])\r\n\r\n  function seleccionarFecha(e){\r\n    setesperaDisponible(true)\r\n    setfechaHoy(e.target.value)\r\n    if (mensaje!==\"\")\r\n      setmensaje(\"\")\r\n    let _fecha = new Date(e.target.value)\r\n    if (_fecha.getUTCDay()!==1){\r\n        axios.get(ruta+'/turnos?fecha='+e.target.value)\r\n        .then(response => {\r\n            setturnos([])\r\n            let turnos_ordenados = response.data;\r\n            // array temporal contiene objetos con posición y valor de ordenamiento\r\n            var arregloAux = turnos_ordenados.map(function(arreglo, i) {\r\n              return { index: i, value: arreglo.persona.apellido.toLowerCase() };\r\n            })\r\n            // ordenando el array mapeado que contiene los valores reducidos\r\n            arregloAux.sort(function(a, b) {\r\n              if (a.value > b.value) {\r\n                return 1;\r\n              }\r\n              if (a.value < b.value) {\r\n                return -1;\r\n              }\r\n              return 0;\r\n            });\r\n            // contenedor para el orden resultante\r\n            var resultado = arregloAux.map(function(arreglo){\r\n              return turnos_ordenados[arreglo.index];\r\n            });\r\n            setturnos(resultado)\r\n            if (response.data.length===0)\r\n              setmensaje(\"No existen reservas para el día seleccionado.\")\r\n            setesperaDisponible(false)\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        });\r\n    }else{\r\n        setturnos([])\r\n        setmensaje(\"Los días lunes no se pueden realizar reservas.\")\r\n        setesperaDisponible(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.fondo2} style={{margin:\"auto\"}}>\r\n      <Paper elevation={3} style={{width:\"100%\",margin:\"10px auto\",padding: \"20px\", background:\"lightblue\"}} className=\"Fondo\">\r\n        <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n            Administrar turnos\r\n        </Typography>\r\n        <Typography align=\"left\">\r\n            Seleccione una fecha:\r\n        </Typography>\r\n        <input\r\n        className={classes.inputAncho}\r\n        id=\"date\"\r\n        type=\"date\"\r\n        value={fechaHoy}\r\n        onChange={seleccionarFecha}\r\n        style={{boxSizing: \"border-box\", padding:\"0px 15px\", fontSize:\"15px\", background:\"rgba(0,0,0,.1)\", borderRadius:\"5px\",border:\"none\"}}/>\r\n\r\n        {esperaDisponible && <Cargando color=\"secondary\"/>}\r\n        {mensaje===\"\"?(<TableContainer component={Paper} style={{maxWidth:\"1000px\",margin:\"10px auto\", background:\"rgba(0,0,0,0)\"}}>\r\n          <Typography align=\"justify\" style={{fontWeight:\"bold\", padding:\"10px\"}}>\r\n            Declaración Jurada de Síntomas de COVID-19 para personas que hayan solicitado un turno hace más de 72 horas: presione en \"X\" en el caso de que la persona en cuestión haya renovado su declaración jurada y asegure no poseer síntomas de COVID-19 al momento de asistir al complejo.\r\n          </Typography>\r\n\r\n          <Table aria-label=\"collapsible table\" style={{background:\"rgba(0,0,0,.1)\"}}>\r\n            <TableHead>\r\n              <StyledTableRow>\r\n                <StyledTableCell align=\"left\">Apellido y nombre</StyledTableCell>\r\n                <StyledTableCell align=\"center\">DNI</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Asistencia/*Juramento*</StyledTableCell>\r\n              </StyledTableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {turnos.map((turno,i) => (\r\n                <Row key={i} turno={turno} ruta={ruta} usuario={usuario}/>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>):(<Typography variant=\"h4\"><br/>{mensaje}</Typography>)}\r\n      </Paper>\r\n    </div>\r\n   \r\n  );\r\n}","F:\\Piletas\\piletas\\src\\Componentes\\notificacion.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\alerta.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\sesion.js",["109","110","111"],"import React, { useState} from 'react';\r\n//Material UI \r\nimport {Grid, LinearProgress, Typography, TextField, Hidden, Button, Divider, } from '@material-ui/core';\r\n\r\n//Librerias\r\nimport axios from 'axios'\r\n\r\nimport Estilos from '../Estilos.js'\r\nimport {useHistory } from \"react-router-dom\";\r\n\r\n//Componente utilizado para cuando se quiere iniciar sesión\r\nexport default function IniciarSesion({ruta,setusuario}) {\r\n  const classes = Estilos();\r\n  let history = useHistory();\r\n  const [open, setOpen] = useState(false);\r\n  const [cargando, setcargando] = useState(false);\r\n  const [alerta, setalerta] = useState(\"\");\r\n  const [pwd_olvidada, setpwd_olvidada] = useState(false);\r\n\r\n  //Los datos inician vacíos\r\n  const [datos, setdatos] = useState({\r\n    email:\"\",\r\n    contrasena:\"\"\r\n  });\r\n  \r\n  //Ejecutado cada vez que se ingresa algún valor en los campos\r\n  const cambiarInput = (e) =>{\r\n    if (alerta!==\"\")\r\n        setalerta(\"\")\r\n    let valor = e.target.value;\r\n    let campo = e.target.name;\r\n    setdatos({\r\n        ...datos,\r\n        [campo]: valor\r\n    })        \r\n  }\r\n  \r\n  //Función ejecutada al presionar el botón de iniciar sesión\r\n  const iniciarSesion = () =>{\r\n    setcargando(true)\r\n    if (alerta!==\"\")\r\n        setalerta(\"\")\r\n\r\n    if (datos.email===\"\" || datos.contrasena===\"\"){\r\n        setalerta('Faltan rellenar campos');\r\n        setcargando(false)\r\n    }\r\n    axios\r\n    .post(ruta+\"/auth/local/\", {\r\n    identifier: datos.email,\r\n    password: datos.contrasena\r\n    })\r\n    .then(response => {\r\n        console.log(response.data)\r\n        setusuario(response.data)\r\n\r\n        localStorage.setItem('datosLocal', JSON.stringify({\r\n            jwt: response.data.jwt,\r\n            datosSesion: response.data.user\r\n        }));\r\n        \r\n        setcargando(false)\r\n        setOpen(false)\r\n\r\n        history.push(\"/listar\")\r\n    })\r\n    .catch(error => {\r\n    // Ocurrió un error\r\n    let err = JSON.parse(error.response.request.response).message[0].messages[0].id;\r\n    console.log(\"Error: \",err)\r\n    if(err===\"Auth.form.error.invalid\")\r\n        setalerta('Usuario/correo o contraseña incorrectos'); \r\n    setcargando(false)\r\n    });    \r\n  }\r\n\r\n  return (\r\n    <div className={classes.fondo2} style={{margin:\"auto\"}}>\r\n        <div className=\"Fondo\"  style={{maxWidth:300}}>\r\n            <Grid  container direction=\"row\" justify=\"center\"  spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h5\" component=\"h1\" align=\"center\" className={classes.form}>\r\n                      Iniciar Sesión\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                    onChange={cambiarInput}\r\n                    name=\"email\"\r\n                    value={datos.email}\r\n                    className={classes.inputAncho}\r\n                    id=\"filled-basic\"\r\n                    label=\"Usuario/Correo electrónico\"\r\n                    variant=\"filled\"\r\n                    required\r\n                />\r\n                </Grid>\r\n                <Divider/>\r\n                \r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                    onChange={cambiarInput}\r\n                    name=\"contrasena\"\r\n                    value={datos.contrasena}\r\n                    required\r\n                    type=\"password\"\r\n                    label=\"Contraseña\"\r\n                    variant=\"filled\"\r\n                    style={{marginTop:\"15px\"}}\r\n                    className={classes.inputAncho}\r\n                    />\r\n                </Grid>\r\n                \r\n                <div className={classes.inputAncho} hidden={!cargando}>\r\n                    <LinearProgress color=\"secondary\"/>\r\n                </div>\r\n\r\n                <Hidden xlDown={alerta===\"\"}>\r\n                    <Typography color=\"error\">\r\n                        {alerta}\r\n                    </Typography>\r\n                </Hidden>\r\n\r\n                <Grid item xs={12} align=\"center\">\r\n                    <Button\r\n                        onClick={iniciarSesion}\r\n                        size=\"large\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\">\r\n                        Iniciar Sesión\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </div>\r\n  );\r\n}","F:\\Piletas\\piletas\\src\\Componentes\\nav.js",["112","113","114"],"import React, { useState} from 'react';\r\nimport {useHistory, Link} from \"react-router-dom\";\r\n//Material UI \r\nimport { AppBar, Toolbar, Typography, Button, Hidden} from '@material-ui/core';\r\nimport Estilos from '../Estilos.js'\r\nimport Salir from '@material-ui/icons/ExitToApp';\r\n\r\n//Componente utilizado para cuando se quiere iniciar sesión\r\nexport default function Nav({setusuario,usuario}) {\r\n  const classes = Estilos();\r\n  let history = useHistory();\r\n\r\n  const cerrarSesion = () => {\r\n    localStorage.setItem('datosLocal', JSON.stringify(null));\r\n    setusuario({jwt:\"\",datosSesion:{}})\r\n    if (history!==undefined)\r\n      history.push(\"/\")\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\" style={{backgroundColor:\"#00CC66\"}}>\r\n        <Toolbar>\r\n            \r\n          <Link to={\"/\"} style={{textDecoration:\"none\",color:\"#393939\",fontFamily: \"Homework\", padding:\"0px 10px\"}}>\r\n              <img src=\"municipalidad_logo.png\" width=\"76px\"></img>\r\n          </Link>\r\n            \r\n          <Link to={\"/\"} style={{textDecoration:\"none\",color:\"#393939\",fontFamily: \"Homework\",}}>\r\n              <Typography variant=\"h5\">\r\n                  Complejo deportivo\r\n              </Typography>\r\n          </Link>\r\n          \r\n          {usuario.jwt!==\"\" && <Button startIcon={<Salir/>} variant=\"contained\" onClick={cerrarSesion} style={{marginLeft: \"auto\"}}>\r\n              <Hidden smDown>\r\n                Cerrar Sesion\r\n              </Hidden>\r\n          </Button>}\r\n        </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\n","F:\\Piletas\\piletas\\src\\Componentes\\Formulario.js",["115","116","117","118"],"F:\\Piletas\\piletas\\src\\Componentes\\Listado.js",["119","120","121"],"F:\\Piletas\\piletas\\src\\Componentes\\Sesion.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\Nav.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\Alerta.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\Notificacion.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\Deporte.js",["122","123","124","125","126","127","128","129","130","131"],"import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {LinearProgress,InputLabel, Checkbox,FormControlLabel, Typography, Radio, RadioGroup, TextField, FormControl, Button, Paper, Grid, Select, MenuItem, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport Cargando from '@material-ui/core/LinearProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Estilos from '../Estilos.js';\r\nimport Notificacion from './Notificacion.js'\r\nimport AlertaMensaje from './Alerta.js'\r\n\r\n\r\n//Componente utilizado para crear o modificar publicaciones o solicitudes de servicios\r\nexport default function Deporte({ruta}) {\r\n    const [siguiente, setsiguiente] = useState(false);\r\n    \r\n    return ( \r\n        siguiente?<Formulario setsiguiente={setsiguiente} ruta={ruta}/>:<Condiciones setsiguiente={setsiguiente}/>\r\n    );\r\n}\r\n\r\nconst Condiciones = ({setsiguiente}) => {\r\n    const classes = Estilos();\r\n\r\n    return (\r\n        <div className={classes.fondo}>\r\n            <Paper elevation={3} style={{padding: \"20px\", background:\"lightblue\", maxWidth:\"1200px\"}} className=\"Fondo\">\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" component=\"h1\" align=\"center\">\r\n                            Inscripción a actividades deportivas\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <ul style={{textAlign:\"left\",textJustify:\"auto\"}}>\r\n                            <li>Los días en donde se puede solicitar turno para realizar actividades deportivas son de martes a domingos.</li>\r\n                            <li>Los turnos para las canchas deportivas son de 20 a 21hs, de 21 a 22hs y de 22 a 23hs.</li>\r\n                            <li>Al momento de ingresar al complejo, deberás presentar tu DNI.</li>\r\n                            <li>Luego de realizado una reserva, deberás esperar 24 horas para poder realizar otra.</li>\r\n                            <li>Para cancelar o modificar los datos de tu reserva, comunicate al correo complejodeportivosb@gmail.com.</li>\r\n                            <strong><li>Es obligatorio el uso de barbijo y elementos de higiene personal dentro del complejo.</li></strong>\r\n                        <br/></ul>       \r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                             \r\n                    </Grid>     \r\n                    <Button className={classes.botones} onClick={()=>{window.scrollTo(0, 0); setsiguiente(true)}} size=\"large\" variant=\"contained\" color=\"secondary\">Siguiente</Button>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Alerta({funcionAceptar, persona, deporte}) {\r\n    const [open, setOpen] = useState(true);\r\n    const [cargando, setcargando] = useState(false)\r\n    const [noEsta, setnoEsta] = useState(persona.nombre===\"\")\r\n    //Ejecutamos la función que se pasa como parámetro\r\n    const handleClose = (boole) => {\r\n      setcargando(true)\r\n      funcionAceptar(boole)\r\n      setcargando(false)\r\n      setOpen(false);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          onClose={()=>{handleClose(false)}}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{noEsta?\"DNI no encontrado\":\"Por favor, confirme que sus datos sean correctos\"}</DialogTitle>\r\n          <DialogContent>\r\n            {!noEsta && <DialogContentText id=\"alert-dialog-description\">\r\n                Nombre: {persona.nombre}<br/>\r\n                Apellido: {persona.apellido}<br/>\r\n                DNI: {persona.dni}<br/>\r\n                Telefono: {persona.telefono}<br/>\r\n                {persona.domicilio?\"Situación: Soy turista\":\"Localidad: San Bernardo\"}<br/>\r\n                Fecha reservada: {deporte.fecha}<br/>\r\n                Deporte: {deporte.tipo}                \r\n            </DialogContentText>}\r\n            {noEsta && <DialogContentText id=\"alert-dialog-description\">\r\n                El DNI introducido no se encuentra registrado. Por favor, ingrese todos sus datos destildando la opción \"Ya he realizado una reserva alguna vez\".\r\n            </DialogContentText>}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={()=>{handleClose(false)}} variant=\"contained\" color=\"secondary\">\r\n              Cancelar\r\n            </Button>\r\n            <Button onClick={()=>{handleClose(true)}} variant=\"contained\" style={{background:\"lightgreen\"}} disabled={noEsta} autoFocus>\r\n              Confirmar\r\n            </Button>\r\n            {cargando && <Cargando/>}\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const Formulario = ({setsiguiente, ruta}) =>{\r\n    const classes = Estilos();\r\n\r\n    const [cargando, setcargando] = useState(false);\r\n    const [abrirConfirmacion, setabrirConfirmacion] = useState(false);\r\n    const [alertaDNI, setalertaDNI] = useState(false);\r\n    const [tildado, settildado] = useState(false);\r\n    const [mensaje, setmensaje] = useState(\"\");\r\n    const [tildadoCovid, settildadoCovid] = useState(false);\r\n    const [disponibles, setdisponibles] = useState(-4);\r\n    const [esperaDisponible, setesperaDisponible] = useState(false);\r\n    const [notificar, setnotificar] = useState(false);\r\n    const [fechaHoy, setfechaHoy] = useState(\"\");\r\n    const [turista, setturista] = useState(false);\r\n    const [abrirAlerta, setabrirAlerta] = useState(false);\r\n    const [cantidadJugadores, setcantidadJugadores] = useState('');\r\n    const [jugadores, setjugadores] = useState([]);\r\n    const [deporteACargar, setdeporteACargar] = useState(null);\r\n\r\n    const [noGuardado, setnoGuardado] = useState(false);\r\n\r\n    const [cargandoSolicitar, setcargandoSolicitar] = useState(false);\r\n    const [msj, setmsj] = useState({descripcion:\"\",tipo:\"success\"});\r\n\r\n    //Datos de la pagina\r\n    const [persona, setpersona] = useState({\r\n        dni: \"\",\r\n        nombre:\"\",\r\n        apellido: \"\",\r\n        domicilio: '',\r\n        telefono: \"\",\r\n        dni_alojado: \"\",\r\n        nombre_alojado:\"\",\r\n        apellido_alojado: \"\",\r\n        domicilio_alojado: \"\"\r\n    });\r\n\r\n    const [jugador, setjugador] = useState({\r\n        dni: \"\",\r\n        nombre:\"\",\r\n        apellido: \"\",\r\n        domicilio: false,\r\n        telefono: \"\",\r\n        dni_alojado: \"\",\r\n        nombre_alojado:\"\",\r\n        apellido_alojado: \"\",\r\n        domicilio_alojado: \"\"\r\n    });\r\n    \r\n    const [deporte, setdeporte] = useState({\r\n        fecha: \"\",\r\n        tipo: \"Fútbol\",\r\n        horario: \"0\",\r\n        nombre_equipo: \"\",\r\n    });\r\n\r\n    useEffect(()=>{\r\n        setcargando(true)\r\n        let date_ = new Date();\r\n        let mes = date_.getMonth() + 1\r\n        if(mes < 10)\r\n            mes = \"0\"+mes\r\n        let dia = date_.getDate()\r\n        if(dia < 10)\r\n            dia = \"0\"+dia\r\n        \r\n        let fecha_ = date_.getFullYear()+\"-\"+mes+\"-\"+dia\r\n\r\n        setfechaHoy(fecha_)\r\n        \r\n        setdeporte({\r\n            ...deporte,\r\n            fecha: fecha_\r\n        })\r\n        setcargando(false)\r\n        setesperaDisponible(true)\r\n        \r\n        if (fecha_ === \"2021-03-09\"){\r\n            setdisponibles(-3)//Día no hábil\r\n            setesperaDisponible(false)\r\n        }else{\r\n            axios.get(ruta+'/deportes/count?fecha='+fecha_+'&horario=0'+'&tipo=0')\r\n            .then(response => {\r\n                setdisponibles(2-response.data)\r\n                setesperaDisponible(false)\r\n            }).catch(error => {\r\n                console.log(error.response)\r\n            });\r\n        }\r\n    },[])\r\n\r\n    function modificarInput(e){\r\n        switch (e.target.name) {\r\n            case \"dni\":\r\n                if (e.target.value>=0 && e.target.value<=99999999){\r\n                    let aux = e.target.value.replace(\".\", \"\")\r\n                    aux = aux.replace(\" \", \"\")\r\n                    setpersona({\r\n                        ...persona,\r\n                        [e.target.name]: aux\r\n                    })\r\n                }\r\n                break;\r\n            case \"dni_alojado\":\r\n                if (e.target.value>=0 && e.target.value<=99999999){\r\n                    let aux = e.target.value.replace(\".\", \"\")\r\n                    aux = aux.replace(\" \", \"\")\r\n                    setpersona({\r\n                        ...persona,\r\n                        [e.target.name]: aux\r\n                    })\r\n                }\r\n                break;\r\n            case \"telefono\":\r\n                if (e.target.value>=0 && e.target.value<=9999999999999){\r\n                    let aux = e.target.value.replace(\".\", \"\")\r\n                    aux = aux.replace(\" \", \"\")\r\n                    setpersona({\r\n                        ...persona,\r\n                        [e.target.name]: aux\r\n                    })\r\n                }\r\n                break;\r\n            default:\r\n                setpersona({\r\n                    ...persona,\r\n                    [e.target.name]: e.target.value\r\n                })\r\n                break;\r\n        }\r\n    }\r\n    \r\n    function inputDeporte(e){\r\n        setdeporte({\r\n            ...deporte,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function seleccionarDeporte(e){\r\n        setdeporte({\r\n            ...deporte,\r\n            tipo: e.target.value\r\n        })\r\n        setesperaDisponible(true)\r\n        let _fecha = new Date(deporte.fecha)\r\n        if (deporte.fecha === \"2021-03-09\"){\r\n            setdisponibles(-3)//Día no hábil\r\n            setesperaDisponible(false)\r\n        }else{\r\n            if (_fecha.getUTCDay()!==1){\r\n                axios.get(ruta+'/deportes/count?fecha='+deporte.fecha+'&horario='+deporte.horario+'&tipo='+(e.target.value===\"Fútbol\"?'0':(e.target.value===\"Voley\"?'1':'2')))\r\n                .then(response => {\r\n                    setdisponibles(2-response.data)\r\n                    setesperaDisponible(false)\r\n                }).catch(error => {\r\n                    console.log(error.response)\r\n                });\r\n            }else{\r\n                setdisponibles(-2)//Cuando se selecciona un lunes\r\n                setesperaDisponible(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    //Método para agregar los datos de un jugador (componente Integrante)\r\n    function guardarIntegrante(integrante_datos,i){\r\n        let aux = jugadores;\r\n        aux[i] = integrante_datos;\r\n        setjugadores([...aux])\r\n    }\r\n\r\n    function seleccionarHorario(e){\r\n        setdeporte({\r\n            ...deporte,\r\n            horario: Number(e.target.value)\r\n        })\r\n        setesperaDisponible(true)\r\n        let _fecha = new Date(deporte.fecha)\r\n        if (deporte.fecha === \"2021-03-09\"){\r\n            setdisponibles(-3)//Día no hábil\r\n            setesperaDisponible(false)\r\n        }else{\r\n            if (_fecha.getUTCDay()!==1){\r\n                axios.get(ruta+'/deportes/count?fecha='+deporte.fecha+'&horario='+e.target.value+'&tipo='+(deporte.tipo===\"Fútbol\"?'0':(deporte.tipo===\"Voley\"?'1':'2')))\r\n                .then(response => {\r\n                    setdisponibles(2-response.data)\r\n                    setesperaDisponible(false)\r\n                }).catch(error => {\r\n                    console.log(error.response)\r\n                });\r\n            }else{\r\n                setdisponibles(-2)//Cuando se selecciona un lunes\r\n                setesperaDisponible(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    function limpiarVariables(){\r\n        setpersona({\r\n            dni: \"\",\r\n            nombre:\"\",\r\n            apellido: \"\",\r\n            telefono: \"\",\r\n            domicilio: '',\r\n            dni_alojado: \"\",\r\n            nombre_alojado:\"\",\r\n            apellido_alojado: \"\",\r\n            domicilio_alojado: \"\"\r\n        });\r\n        setcantidadJugadores('')\r\n        setjugadores([])\r\n        setdeporte({\r\n            fecha: deporte.fecha,\r\n            tipo: \"Fútbol\",\r\n            horario: '0',\r\n            nombre_equipo: \"\",\r\n        });\r\n    }\r\n\r\n\r\n    async function alertaPregunta(e){\r\n        e.preventDefault();\r\n        setcargandoSolicitar(true)\r\n\r\n        let vacio = jugadores.some((jug)=> (jug.nombre===\"\" || jug.dni===\"\" || jug.apellido===\"\"))\r\n\r\n        if(!vacio){\r\n            if(tildado){\r\n                let personaObtenida = null;\r\n                try{\r\n                    personaObtenida = await axios.post(ruta+'/obtener-persona',{dni:persona.dni})\r\n                }catch(error){\r\n\r\n                }\r\n\r\n                if(personaObtenida){\r\n                    personaObtenida = personaObtenida.data\r\n\r\n                    setpersona({\r\n                        dni: personaObtenida.dni,\r\n                        nombre: personaObtenida.nombre,\r\n                        apellido: personaObtenida.apellido,\r\n                        domicilio: personaObtenida.domicilio,\r\n                        telefono: personaObtenida.telefono,\r\n                        dni_alojado: personaObtenida.dni_alojado,\r\n                        nombre_alojado: personaObtenida.nombre_alojado,\r\n                        apellido_alojado: personaObtenida.apellido_alojado,\r\n                        domicilio_alojado: personaObtenida.domicilio_alojado,\r\n                    })\r\n                    setcargandoSolicitar(false)\r\n                    setabrirConfirmacion(true)\r\n                    setcargandoSolicitar(false)\r\n                }else{\r\n                    setcargandoSolicitar(false)\r\n                    setmsj({descripcion:'El DNI ingresado no se encuentra registrado, por favor, ingrese otro.',tipo:\"error\"})\r\n                    setabrirAlerta(true)\r\n                }   \r\n            }else{\r\n                setcargandoSolicitar(false)\r\n                setabrirConfirmacion(true)\r\n                setcargandoSolicitar(false)\r\n            }\r\n        }else{\r\n            setcargandoSolicitar(false)\r\n            setmsj({descripcion:\"Debe guardar los datos de los integrantes del equipo antes de realizar el turno.\",tipo:\"warning\"})\r\n            setabrirAlerta(true)\r\n        }\r\n    }\r\n\r\n    async function solicitarDeporte(boole){\r\n        setabrirConfirmacion(false)\r\n        setcargandoSolicitar(true)\r\n        let tipo_ = deporte.tipo === \"Fútbol\"?'0':(deporte.tipo===\"Voley\"?'1':'2')\r\n        let deporte_ = {...deporte};\r\n\r\n        deporte_.tipo = Number(tipo_);\r\n        if(boole){\r\n            if(tildado){\r\n                let respuesta = await axios.post(ruta+'/turno-deporte-creada',{persona: persona, deporte: deporte_, personas: jugadores})\r\n                setcargandoSolicitar(false)\r\n                if (respuesta.data.tipo===\"success\"){\r\n                    setdisponibles(disponibles-1)\r\n                }\r\n                limpiarVariables()\r\n                setmsj({descripcion:respuesta.data.mensaje,tipo:respuesta.data.tipo});\r\n                setabrirAlerta(true)\r\n            }else{\r\n                let respuesta = await axios.post(ruta+'/turno-deporte-nueva',{persona: persona, deporte: deporte_, personas: jugadores})\r\n                setcargandoSolicitar(false)\r\n                if (respuesta.data.tipo===\"success\"){\r\n                    limpiarVariables()\r\n                    setdisponibles(disponibles-1)\r\n                }\r\n                setmsj({descripcion:respuesta.data.mensaje,tipo:respuesta.data.tipo});\r\n                setabrirAlerta(true)\r\n            }\r\n        }else{\r\n            setcargandoSolicitar(false)\r\n        }\r\n    }\r\n    \r\n    function desplegarJugadores(cant){\r\n        setjugadores([])\r\n        setcantidadJugadores(cant)\r\n        for (let i = 0; i < cant-1; i++) {\r\n            setjugadores(elemento => [...elemento, jugador])\r\n        }\r\n    }\r\n\r\n    function seleccionarFecha(e){\r\n        setdeporte({...deporte, fecha: e.target.value})\r\n        setesperaDisponible(true)\r\n        let _fecha = new Date(e.target.value)\r\n        if (e.target.value === \"2021-03-09\"){\r\n            setdisponibles(-3)//Día no hábil\r\n            setesperaDisponible(false)\r\n        }else{\r\n            if (_fecha.getUTCDay()!==1){\r\n                axios.get(ruta+'/deportes/count?fecha='+e.target.value+'&horario='+deporte.horario+'&tipo='+(deporte.tipo===\"Fútbol\"?'0':(deporte.tipo===\"Voley\"?'1':'2')))\r\n                .then(response => {\r\n                    setdisponibles(2-response.data)\r\n                    setesperaDisponible(false)\r\n                }).catch(error => {\r\n                    console.log(error.response)\r\n                });\r\n            }else{\r\n                setdisponibles(-2)//Cuando se selecciona un lunes\r\n                setesperaDisponible(false)\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.fondo}>\r\n            <Paper elevation={3} style={{padding: \"10px\", background:\"lightblue\"}}>\r\n                <form onSubmit={alertaPregunta}>\r\n                    <FormControl color=\"primary\" fullWidth>\r\n                        <Grid className={classes.pantallaMedia} container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n                                    Turnos de canchas deportivas\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" component=\"h1\" align=\"center\">\r\n                                    Complete los campos abajo indicados para realizar la reserva de la cancha. Una persona (la que indica los datos iniciales) será la encargada de cargar los datos personales de los demás integrantes del equipo.\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                                <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={tildado}\r\n                                        onChange={()=>{settildado(!tildado)}}\r\n                                        name=\"checkedF\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Ya he realizado una reserva alguna vez\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.dni}\r\n                                name=\"dni\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"DNI\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>\r\n                            \r\n                            {!tildado && <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.nombre}\r\n                                name=\"nombre\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"Nombre\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>}\r\n\r\n                            {!tildado && <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.apellido}\r\n                                name=\"apellido\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"Apellido\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>}\r\n                                \r\n                            {!tildado && <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.telefono}\r\n                                    name=\"telefono\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Número de celular\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                />\r\n                            </Grid>}\r\n\r\n                            {!tildado && <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <FormControl className={classes.inputAncho}>\r\n                                    <InputLabel id=\"demo-simple-select-label\" style={{margin:\"7px 10px\"}}>Localidad</InputLabel>\r\n                                    <Select\r\n                                        value={persona.domicilio}\r\n                                        name=\"domicilio\"\r\n                                        onChange={modificarInput}\r\n                                        id=\"domicilio\"\r\n                                        variant=\"filled\"\r\n                                        required\r\n                                    >\r\n                                        <MenuItem value={false} onClick={()=>setturista(false)}>San Bernardo</MenuItem>\r\n                                        <MenuItem value={true} onClick={()=>setturista(true)}>Soy turista</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>}\r\n\r\n                            {/*Selecciona la opcion Soy turista */}\r\n                            {turista && !tildado && <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1} style={{margin:\"10px\"}}>\r\n                                <Alert variant=\"filled\" severity=\"info\">\r\n                                    Ingrese los datos de la persona con la cual se encuentra alojada. Al momento de asistir al complejo, deberá presentar una fotocopia del DNI de dicha persona.\r\n                                </Alert>\r\n\r\n                                <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.dni_alojado}\r\n                                    name=\"dni_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"DNI\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n\r\n                                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.nombre_alojado}\r\n                                    name=\"nombre_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Nombre\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n\r\n                                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.apellido_alojado}\r\n                                    name=\"apellido_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Apellido\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n\r\n                                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                    <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.domicilio_alojado}\r\n                                    name=\"domicilio_alojado\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Domicilio\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                    required/>\r\n                                </Grid>\r\n                            </Grid>}\r\n\r\n                            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <FormControl className={classes.inputAncho}>\r\n                                    <InputLabel id=\"demo-simple-select-label\" style={{margin:\"7px 10px\"}}>Deporte</InputLabel>\r\n                                    <Select\r\n                                        value={deporte.tipo}\r\n                                        name=\"tipo\"\r\n                                        onChange={seleccionarDeporte}\r\n                                        id=\"tipo\"\r\n                                        variant=\"filled\"\r\n                                        required\r\n                                    >\r\n                                        <MenuItem value={\"Fútbol\"}>Fútbol</MenuItem>\r\n                                        <MenuItem value={\"Voley\"}>Voley</MenuItem>\r\n                                        <MenuItem value={\"Básquet\"}>Básquet</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                                <FormControl component=\"fieldset\">\r\n                                    <RadioGroup aria-label=\"Horario\" name=\"horario\" value={String(deporte.horario)} onChange={seleccionarHorario}>\r\n                                    <FormControlLabel value={\"0\"} control={<Radio />} label=\"De 20 a 21 hs\" />\r\n                                    <FormControlLabel value={\"1\"} control={<Radio />} label=\"De 21 a 22 hs\" />\r\n                                    <FormControlLabel value={\"2\"} control={<Radio />} label=\"De 22 a 23 hs\" />\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <Typography align=\"center\" variant=\"h6\">\r\n                                    Seleccione la fecha a reservar\r\n                                </Typography>\r\n                                <input\r\n                                className={classes.inputAncho}\r\n                                onChange={seleccionarFecha}\r\n                                id=\"date\"\r\n                                type=\"date\"\r\n                                min={fechaHoy}\r\n                                required\r\n                                value={deporte.fecha}\r\n                                style={{boxSizing: \"border-box\", padding:\"0px 10px\",background:\"rgba(0,0,0,.1)\", borderRadius:\"5px\",border:\"none\"}}/>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                                {esperaDisponible && <Typography align=\"center\" variant=\"h6\">Cargando...</Typography>}\r\n                                {esperaDisponible && <LinearProgress color=\"secondary\"/>}\r\n                                <Typography color=\"secondary\"> {disponibles===-1?\"0 lugares disponibles\":(disponibles===-2?\"Los días lunes no se puede reservar.\":(disponibles===1?`${disponibles} lugar disponible`:(disponibles===-3?\"El complejo permancerá cerrado esta fecha. Por favor, seleccione una distinta.\":(disponibles===-4?\"\":`${disponibles} lugares disponibles`))))} </Typography>\r\n                            </Grid>\r\n\r\n                            {deporte.tipo!=='' && <Grid item lg={6} md={6} sm={12} xs={12} align=\"right\">\r\n                                <TextField\r\n                                onChange={inputDeporte}\r\n                                value={deporte.nombre_equipo}\r\n                                name=\"nombre_equipo\"\r\n                                id=\"filled-basic\"\r\n                                label=\"Nombre del equipo\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>}\r\n\r\n                            {deporte.tipo!=='' && <Grid item lg={6} md={6} sm={12} xs={12} align=\"left\">\r\n                                <FormControl style={{width:\"190px\"}}>\r\n                                    <InputLabel id=\"demo-simple-select-label\" style={{margin:\"7px 10px\"}}>Cantidad de jugadores</InputLabel>\r\n                                    <Select\r\n                                        value={cantidadJugadores}\r\n                                        name=\"cantidad\"\r\n                                        id=\"cantidad\"\r\n                                        variant=\"filled\"\r\n                                        required\r\n                                    >\r\n                                        <MenuItem value={\"2\"} onClick={()=>desplegarJugadores(2)}>2</MenuItem>\r\n                                        <MenuItem value={\"3\"} onClick={()=>desplegarJugadores(3)}>3</MenuItem>\r\n                                        <MenuItem value={\"4\"} onClick={()=>desplegarJugadores(4)}>4</MenuItem>\r\n                                        <MenuItem value={\"5\"} onClick={()=>desplegarJugadores(5)}>5</MenuItem>\r\n                                        <MenuItem value={\"6\"} onClick={()=>desplegarJugadores(6)}>6</MenuItem>\r\n                                        {deporte.tipo!==\"Voley\" && <MenuItem value={\"7\"} onClick={()=>desplegarJugadores(7)}>7</MenuItem>}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>}\r\n                        </Grid>\r\n\r\n                        {jugadores.map((integrante, i) => (             \r\n                            <Integrante integrante={integrante} key={i} i={i} guardarIntegrante={guardarIntegrante}/>\r\n                        ))}\r\n                        {\r\n                            noGuardado && <Alert variant=\"filled\" severity=\"error\">\r\n                                Debe guardar los datos de los jugadores.\r\n                            </Alert>\r\n                        }\r\n\r\n                        <Grid className={classes.pantallaMedia} container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                            <br/>\r\n                            <Typography variant=\"h4\" component=\"h4\" align=\"center\">\r\n                                Declaracion Jurada de Síntomas de COVID-19\r\n                            </Typography>                                \r\n\r\n                            <Grid item sm={12}>\r\n                                <img src=\"../sintomas.jpg\" width=\"100%\" alt=\"\"></img>\r\n                                <br/>\r\n                                <br/>\r\n                                <Typography fontWeight=\"fontWeightBold\" align=\"justify\">\r\n                                    Si tenés dos o más de los siguientes síntomas: fiebre de 37,5°C, tos, dolor de garganta, dificultad respiratoria, dolor muscular, cefalea, diarrea y/o vómitos, o si tenés solo pérdida brusca de gusto u olfato, comunicate al cel 3735604561 de 09 a 11hs y de 17 a 20 hs sin excepción.\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={tildadoCovid}\r\n                                    onChange={()=>{settildadoCovid(!tildadoCovid)}}\r\n                                    name=\"tildadoCovid\"\r\n                                    required\r\n                                />\r\n                            }\r\n                            label=\"Declaro bajo juramento que no tengo síntomas de COVID-19\"\r\n                            />\r\n                            <Grid item xs={12} className={classes.inputAncho}>\r\n                                {cargando && <Cargando/>}\r\n                            </Grid>\r\n\r\n                            \r\n                            <Grid item xs={12} align=\"center\" style={{margin:\"15px\"}}>\r\n                                {cargandoSolicitar && <LinearProgress color=\"secondary\"/>}\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.botones} onClick={()=>{setsiguiente(false)}} size=\"large\" variant=\"contained\" color=\"secondary\">Atras</Button>\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.botones} disabled={cargando || disponibles<=0} type=\"submit\" size=\"large\" variant=\"contained\" style={{background:\"lightgreen\"}}>Solicitar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {abrirConfirmacion && <Alerta funcionAceptar={solicitarDeporte} persona={persona} deporte={deporte}/>}\r\n\r\n                        {notificar && <Notificacion funcionAceptar={setnotificar} mensaje={mensaje}/>}\r\n                        <AlertaMensaje mensaje={msj} abrir={abrirAlerta} setabrir={setabrirAlerta}/>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Integrante = React.memo(({integrante, i, guardarIntegrante}) =>{\r\n    const classes = Estilos();\r\n    const [turista, setturista] = useState(false);\r\n    const [datosIntegrante, setdatosIntegrante] = useState(integrante);\r\n    const [guardar, setguardar] = useState(false);\r\n\r\n    function inputJugadores(e){\r\n        if (!guardar){\r\n            switch (e.target.name) {\r\n                case \"dni\":\r\n                    if (e.target.value>=0 && e.target.value<=99999999){\r\n                        let aux = e.target.value.replace(\".\", \"\")\r\n                        aux = aux.replace(\" \", \"\")\r\n                        setdatosIntegrante({...datosIntegrante, [e.target.name]: aux})\r\n                    }\r\n                    break;\r\n                case \"dni_alojado\":\r\n                    if (e.target.value>=0 && e.target.value<=99999999){\r\n                        let aux = e.target.value.replace(\".\", \"\")\r\n                        aux = aux.replace(\" \", \"\")\r\n                        setdatosIntegrante({...datosIntegrante, [e.target.name]: aux})\r\n                    }\r\n                    break;\r\n                case \"telefono\":\r\n                    if (e.target.value>=0 && e.target.value<=9999999999999){\r\n                        let aux = e.target.value.replace(\".\", \"\")\r\n                        aux = aux.replace(\" \", \"\")\r\n                        setdatosIntegrante({...datosIntegrante, [e.target.name]: aux})\r\n                    }\r\n                    break;\r\n                default:\r\n                    setdatosIntegrante({...datosIntegrante, [e.target.name]: e.target.value})\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function guardarDatos(){\r\n        if(guardar){\r\n            setguardar(false)\r\n            guardarIntegrante({\r\n                dni: \"\",\r\n                nombre:\"\",\r\n                apellido: \"\",\r\n                domicilio: false,\r\n                telefono: \"\",\r\n                dni_alojado: \"\",\r\n                nombre_alojado:\"\",\r\n                apellido_alojado: \"\",\r\n                domicilio_alojado: \"\"\r\n            },i)\r\n        }else{\r\n            setguardar(true)\r\n            guardarIntegrante(datosIntegrante,i)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid className={classes.pantallaMedia} style={{background:guardar?\"lightgreen\":\"\"}} container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n            <Grid item lg={12} md={12} sm={12} xs={12} align=\"left\">\r\n                <Typography variant=\"h6\">Jugador {i+2}:</Typography>\r\n            </Grid>\r\n\r\n            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextField\r\n                onChange={inputJugadores}\r\n                value={datosIntegrante.dni}\r\n                name=\"dni\"\r\n                className={classes.inputAncho}\r\n                id=\"filled-basic\"\r\n                label=\"DNI\"\r\n                variant=\"filled\"\r\n                maxLength={50}\r\n                required\r\n                />\r\n            </Grid>\r\n            \r\n            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextField\r\n                onChange={(e)=>{inputJugadores(e,i)}}\r\n                value={datosIntegrante.nombre}\r\n                name=\"nombre\"\r\n                className={classes.inputAncho}\r\n                id=\"filled-basic\"\r\n                label=\"Nombre\"\r\n                variant=\"filled\"\r\n                maxLength={50}\r\n                required\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextField\r\n                onChange={inputJugadores}\r\n                value={datosIntegrante.apellido}\r\n                name=\"apellido\"\r\n                className={classes.inputAncho}\r\n                id=\"filled-basic\"\r\n                label=\"Apellido\"\r\n                variant=\"filled\"\r\n                maxLength={50}\r\n                required\r\n                />\r\n            </Grid>\r\n                \r\n            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <TextField\r\n                    onChange={inputJugadores}\r\n                    value={datosIntegrante.telefono}\r\n                    name=\"telefono\"\r\n                    className={classes.inputAncho}\r\n                    id=\"filled-basic\"\r\n                    label=\"Número de celular\"\r\n                    variant=\"filled\"\r\n                    maxLength={50}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <FormControl className={classes.inputAncho}>\r\n                    <InputLabel id=\"demo-simple-select-label\" style={{margin:\"7px 10px\"}}>Localidad</InputLabel>\r\n                    <Select\r\n                        value={datosIntegrante.domicilio}\r\n                        name=\"domicilio\"\r\n                        onChange={inputJugadores}\r\n                        id=\"domicilio\"\r\n                        variant=\"filled\"\r\n                        required\r\n                    >\r\n                        <MenuItem value={false} onClick={()=>{if(!guardar)setturista(false)}}>San Bernardo</MenuItem>\r\n                        <MenuItem value={true} onClick={()=>{if(!guardar)setturista(true)}}>Soy turista</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n\r\n            {/*Selecciona la opcion Soy turista */}\r\n            {turista && <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1} style={{margin:\"10px\"}}>\r\n                <Alert variant=\"filled\" severity=\"info\">\r\n                    Ingrese los datos de la persona con la cual se encuentra alojada. Al momento de asistir al complejo, deberá presentar una fotocopia del DNI de dicha integrante.\r\n                </Alert>\r\n\r\n                <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                    <TextField\r\n                    onChange={inputJugadores}\r\n                    value={datosIntegrante.dni_alojado}\r\n                    name=\"dni_alojado\"\r\n                    className={classes.inputAncho}\r\n                    id=\"filled-basic\"\r\n                    label=\"DNI\"\r\n                    variant=\"filled\"\r\n                    maxLength={50}\r\n                    required\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                    <TextField\r\n                    onChange={inputJugadores}\r\n                    value={datosIntegrante.nombre_alojado}\r\n                    name=\"nombre_alojado\"\r\n                    className={classes.inputAncho}\r\n                    id=\"filled-basic\"\r\n                    label=\"Nombre\"\r\n                    variant=\"filled\"\r\n                    maxLength={50}\r\n                    required\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                    <TextField\r\n                    onChange={inputJugadores}\r\n                    value={datosIntegrante.apellido_alojado}\r\n                    name=\"apellido_alojado\"\r\n                    className={classes.inputAncho}\r\n                    id=\"filled-basic\"\r\n                    label=\"Apellido\"\r\n                    variant=\"filled\"\r\n                    maxLength={50}\r\n                    required\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                    <TextField\r\n                    onChange={inputJugadores}\r\n                    value={datosIntegrante.domicilio_alojado}\r\n                    name=\"domicilio_alojado\"\r\n                    className={classes.inputAncho}\r\n                    id=\"filled-basic\"\r\n                    label=\"Domicilio\"\r\n                    variant=\"filled\"\r\n                    maxLength={50}\r\n                    required\r\n                    />\r\n                </Grid>\r\n            </Grid>}\r\n            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                <Button className={classes.botones} onClick={guardarDatos} size=\"small\" variant=\"outlined\" color=\"secondary\">{guardar?\"Editar\":\"Guardar\"}</Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n})","F:\\Piletas\\piletas\\src\\Componentes\\ListadoDeporte.js",["132","133"],"import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from \"react-router-dom\";\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {Box, Collapse, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Button, Typography, Paper, Grid } from '@material-ui/core';\r\nimport Cargando from '@material-ui/core/LinearProgress';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Estilos from '../Estilos.js';\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {    '& > *': {\r\n      borderBottom: 'unset',\r\n      padding:\"5px\",\r\n    },\r\n  },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction Row({turno, ruta, usuario}) {\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useRowStyles();\r\n  const [Turno, setTurno] = useState(turno);\r\n\r\n  let auth = 'Bearer '+usuario.jwt;\r\n\r\n  function asignarAsistencia(){\r\n    let asis = !Turno.asistencia;\r\n    axios.put(ruta+'/turnos/'+Turno.id,{\r\n      asistencia: asis\r\n    },{headers: {'Authorization': auth}})\r\n    .then(response => {\r\n      setTurno({\r\n        ...Turno,\r\n        asistencia: !Turno.asistencia\r\n      })\r\n    }).catch(error => {\r\n      console.log(error.response)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledTableRow className={classes.root}>\r\n        <StyledTableCell align=\"left\" component=\"th\" scope=\"row\" onClick={() => setOpen(!open)}>\r\n          <IconButton aria-label=\"expand row\" size=\"small\" >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n          {Turno.nombre_equipo}\r\n        </StyledTableCell>\r\n        <StyledTableCell align=\"center\">{Turno.tipo===0?\"Fútbol\":(Turno.tipo===1?\"Voley\":\"Básquet\")}</StyledTableCell>\r\n        <StyledTableCell align=\"center\">{Turno.horario===0?\"De 20 a 21 hs\":(Turno.horario===1?\"De 21 a 22 hs\":\"De 22 a 23 hs\")}</StyledTableCell>\r\n\r\n      </StyledTableRow>\r\n      <StyledTableRow>\r\n        <StyledTableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box>\r\n                {Turno.personas.map((persona,i) => (\r\n                    <Grid key={i} container>\r\n                        <Grid item lg={6} md={6} sm={12} xs={12} align=\"center\">\r\n                            <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                Apellido y nombre: {`${persona.apellido} ${persona.nombre}`}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                            <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                DNI: {persona.dni}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={3} md={3} sm={12} xs={12} align=\"center\">\r\n                            <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                Teléfono: {persona.telefono!==\"\"?persona.telefono:\"N/A\"}\r\n                            </Typography>\r\n                        </Grid>\r\n                        {persona.domicilio &&\r\n                            <Grid item lg={12} md={12} sm={12} xs={12} align=\"center\">\r\n                                <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                Datos de la persona con la que se aloja:\r\n                                </Typography>\r\n                            </Grid>}\r\n                        {persona.domicilio &&\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                DNI: {persona.dni_alojado}\r\n                                </Typography>\r\n                            </Grid>}\r\n                        {persona.domicilio &&\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                Apellido y Nombre: {`${persona.apellido_alojado} ${persona.nombre_alojado}`}\r\n                                </Typography>\r\n                            </Grid>}\r\n                        {persona.domicilio &&\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n                                Domicilio: {persona.domicilio_alojado}\r\n                                </Typography>\r\n                            </Grid>}\r\n                        <Grid item lg={12} md={12} sm={12} xs={12} align=\"center\">\r\n                            <hr/>\r\n                        </Grid>\r\n                    </Grid>\r\n                ))}\r\n            </Box>\r\n          </Collapse>\r\n        </StyledTableCell>\r\n      </StyledTableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default function Listado({ruta,usuario}) {\r\n  const classes = Estilos();\r\n  const [fechaHoy, setfechaHoy] = useState(\"\");\r\n  const [mensaje, setmensaje] = useState(\"\");\r\n  const [esperaDisponible, setesperaDisponible] = useState(false);\r\n  const [deportes, setdeportes] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    let date_ = new Date();\r\n    let mes = date_.getMonth() + 1\r\n    if(mes < 10)\r\n        mes = \"0\"+mes\r\n    let dia = date_.getDate()\r\n    if(dia < 10)\r\n        dia = \"0\"+dia\r\n    \r\n    setfechaHoy(date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n\r\n    setesperaDisponible(true)\r\n    axios.get(ruta+'/deportes?fecha='+date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n    .then(response => {\r\n        setdeportes([])\r\n        setdeportes(response.data)\r\n        setesperaDisponible(false)\r\n    }).catch(error => {\r\n        console.log(error.response)\r\n    });\r\n  },[])\r\n\r\n  function seleccionarFecha(e){\r\n    setesperaDisponible(true)\r\n    setfechaHoy(e.target.value)\r\n    if (mensaje!==\"\")\r\n      setmensaje(\"\")\r\n    let _fecha = new Date(e.target.value)\r\n    if (_fecha.getUTCDay()!==1){\r\n        axios.get(ruta+'/deportes?fecha='+e.target.value)\r\n        .then(response => {\r\n            setdeportes([])\r\n            setdeportes(response.data)\r\n            if (response.data.length===0)\r\n              setmensaje(\"No existen reservas para el día seleccionado.\")\r\n            setesperaDisponible(false)\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        });\r\n    }else{\r\n        setdeportes([])\r\n        setmensaje(\"Los días lunes no se pueden realizar reservas.\")\r\n        setesperaDisponible(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.fondo2} style={{margin:\"auto\"}}>\r\n      <Paper elevation={3} style={{width:\"100%\",margin:\"10px auto\",padding: \"20px\", background:\"lightblue\"}} className=\"Fondo\">\r\n        <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n            Administrar turnos de canchas deportivas\r\n        </Typography>\r\n        <Grid container>\r\n          <Grid item lg={3} md={3} sm={4} xs={4} align=\"left\">\r\n            <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n              Seleccione una fecha:\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item lg={9} md={9} sm={8} xs={8} align=\"right\">\r\n            <Link to={\"/listar/\"} style={{textDecoration:\"none\", padding: 0, color:\"black\"}}>\r\n              <Button align=\"right\" color=\"primary\" style={{marginLeft: \"auto\"}}>\r\n                Listado de turnos de pileta\r\n              </Button>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        <input\r\n        className={classes.inputAncho}\r\n        id=\"date\"\r\n        type=\"date\"\r\n        value={fechaHoy}\r\n        onChange={seleccionarFecha}\r\n        style={{boxSizing: \"border-box\", padding:\"0px 15px\", fontSize:\"15px\", background:\"rgba(0,0,0,.1)\", borderRadius:\"5px\",border:\"none\"}}/>\r\n\r\n        {esperaDisponible && <Cargando color=\"secondary\"/>}\r\n        {mensaje===\"\"?(<TableContainer component={Paper} style={{maxWidth:\"1000px\",margin:\"10px auto\", background:\"rgba(0,0,0,0)\"}}>\r\n\r\n          <Table aria-label=\"collapsible table\" style={{background:\"rgba(0,0,0,.1)\"}}>\r\n            <TableHead>\r\n              <StyledTableRow>\r\n                <StyledTableCell align=\"left\">Nombre del Equipo</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Deporte</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Horario</StyledTableCell>\r\n              </StyledTableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {deportes.map((turno,i) => (\r\n                <Row key={i} turno={turno} ruta={ruta} usuario={usuario}/>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>):(<Typography variant=\"h4\"><br/>{mensaje}</Typography>)}\r\n      </Paper>\r\n    </div>\r\n   \r\n  );\r\n}","F:\\Piletas\\piletas\\src\\Componentes\\pdf-comprobante.js",["134","135"],"F:\\Piletas\\piletas\\src\\Componentes\\ObtenerComprobante.js",["136","137","138","139","140","141","142","143","144","145","146","147","148","149"],"F:\\Piletas\\piletas\\src\\Componentes\\pdf-listado.js",["150","151","152","153","154","155","156","157"],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":2,"column":9,"nodeType":"164","messageId":"165","endLine":2,"endColumn":19},{"ruleId":"162","severity":1,"message":"166","line":53,"column":20,"nodeType":"164","messageId":"165","endLine":53,"endColumn":29},{"ruleId":"162","severity":1,"message":"167","line":102,"column":22,"nodeType":"164","messageId":"165","endLine":102,"endColumn":33},{"ruleId":"168","severity":1,"message":"169","line":161,"column":7,"nodeType":"170","endLine":161,"endColumn":9,"suggestions":"171"},{"ruleId":"168","severity":1,"message":"172","line":166,"column":7,"nodeType":"170","endLine":166,"endColumn":16,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":289,"column":84,"nodeType":"176","messageId":"177","endLine":289,"endColumn":85},{"ruleId":"174","severity":1,"message":"175","line":289,"column":108,"nodeType":"176","messageId":"177","endLine":289,"endColumn":109},{"ruleId":"162","severity":1,"message":"178","line":334,"column":14,"nodeType":"164","messageId":"165","endLine":334,"endColumn":15},{"ruleId":"179","severity":1,"message":"180","line":535,"column":33,"nodeType":"181","endLine":535,"endColumn":70},{"ruleId":"158","replacedBy":"182"},{"ruleId":"160","replacedBy":"183"},{"ruleId":"168","severity":1,"message":"184","line":49,"column":5,"nodeType":"170","endLine":49,"endColumn":7,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":181,"column":5,"nodeType":"170","endLine":181,"endColumn":7,"suggestions":"187"},{"ruleId":"162","severity":1,"message":"188","line":15,"column":10,"nodeType":"164","messageId":"165","endLine":15,"endColumn":14},{"ruleId":"162","severity":1,"message":"189","line":18,"column":10,"nodeType":"164","messageId":"165","endLine":18,"endColumn":22},{"ruleId":"162","severity":1,"message":"190","line":18,"column":24,"nodeType":"164","messageId":"165","endLine":18,"endColumn":39},{"ruleId":"162","severity":1,"message":"191","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"192","line":10,"column":9,"nodeType":"164","messageId":"165","endLine":10,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":25,"column":15,"nodeType":"181","endLine":25,"endColumn":62},{"ruleId":"162","severity":1,"message":"166","line":60,"column":20,"nodeType":"164","messageId":"165","endLine":60,"endColumn":29},{"ruleId":"162","severity":1,"message":"193","line":113,"column":21,"nodeType":"164","messageId":"165","endLine":113,"endColumn":31},{"ruleId":"168","severity":1,"message":"169","line":189,"column":7,"nodeType":"170","endLine":189,"endColumn":9,"suggestions":"194"},{"ruleId":"168","severity":1,"message":"195","line":246,"column":7,"nodeType":"170","endLine":246,"endColumn":26,"suggestions":"196"},{"ruleId":"168","severity":1,"message":"184","line":52,"column":5,"nodeType":"170","endLine":52,"endColumn":7,"suggestions":"197"},{"ruleId":"162","severity":1,"message":"198","line":179,"column":16,"nodeType":"164","messageId":"165","endLine":179,"endColumn":23},{"ruleId":"168","severity":1,"message":"186","line":226,"column":5,"nodeType":"170","endLine":226,"endColumn":14,"suggestions":"199"},{"ruleId":"162","severity":1,"message":"166","line":55,"column":20,"nodeType":"164","messageId":"165","endLine":55,"endColumn":29},{"ruleId":"162","severity":1,"message":"200","line":106,"column":12,"nodeType":"164","messageId":"165","endLine":106,"endColumn":21},{"ruleId":"162","severity":1,"message":"201","line":106,"column":23,"nodeType":"164","messageId":"165","endLine":106,"endColumn":35},{"ruleId":"162","severity":1,"message":"193","line":108,"column":21,"nodeType":"164","messageId":"165","endLine":108,"endColumn":31},{"ruleId":"162","severity":1,"message":"202","line":118,"column":12,"nodeType":"164","messageId":"165","endLine":118,"endColumn":26},{"ruleId":"162","severity":1,"message":"203","line":118,"column":28,"nodeType":"164","messageId":"165","endLine":118,"endColumn":45},{"ruleId":"162","severity":1,"message":"204","line":120,"column":24,"nodeType":"164","messageId":"165","endLine":120,"endColumn":37},{"ruleId":"162","severity":1,"message":"205","line":138,"column":21,"nodeType":"164","messageId":"165","endLine":138,"endColumn":31},{"ruleId":"174","severity":1,"message":"175","line":182,"column":72,"nodeType":"176","messageId":"177","endLine":182,"endColumn":73},{"ruleId":"168","severity":1,"message":"206","line":190,"column":7,"nodeType":"170","endLine":190,"endColumn":9,"suggestions":"207"},{"ruleId":"162","severity":1,"message":"208","line":44,"column":12,"nodeType":"164","messageId":"165","endLine":44,"endColumn":29},{"ruleId":"168","severity":1,"message":"186","line":158,"column":5,"nodeType":"170","endLine":158,"endColumn":7,"suggestions":"209"},{"ruleId":"162","severity":1,"message":"210","line":3,"column":25,"nodeType":"164","messageId":"165","endLine":3,"endColumn":38},{"ruleId":"162","severity":1,"message":"211","line":3,"column":55,"nodeType":"164","messageId":"165","endLine":3,"endColumn":72},{"ruleId":"162","severity":1,"message":"212","line":1,"column":25,"nodeType":"164","messageId":"165","endLine":1,"endColumn":34},{"ruleId":"162","severity":1,"message":"213","line":3,"column":9,"nodeType":"164","messageId":"165","endLine":3,"endColumn":19},{"ruleId":"162","severity":1,"message":"214","line":3,"column":21,"nodeType":"164","messageId":"165","endLine":3,"endColumn":29},{"ruleId":"162","severity":1,"message":"215","line":3,"column":30,"nodeType":"164","messageId":"165","endLine":3,"endColumn":46},{"ruleId":"162","severity":1,"message":"216","line":3,"column":60,"nodeType":"164","messageId":"165","endLine":3,"endColumn":65},{"ruleId":"162","severity":1,"message":"217","line":3,"column":67,"nodeType":"164","messageId":"165","endLine":3,"endColumn":77},{"ruleId":"162","severity":1,"message":"218","line":3,"column":124,"nodeType":"164","messageId":"165","endLine":3,"endColumn":130},{"ruleId":"162","severity":1,"message":"219","line":3,"column":132,"nodeType":"164","messageId":"165","endLine":3,"endColumn":140},{"ruleId":"162","severity":1,"message":"220","line":3,"column":142,"nodeType":"164","messageId":"165","endLine":3,"endColumn":148},{"ruleId":"162","severity":1,"message":"210","line":3,"column":150,"nodeType":"164","messageId":"165","endLine":3,"endColumn":163},{"ruleId":"162","severity":1,"message":"221","line":3,"column":165,"nodeType":"164","messageId":"165","endLine":3,"endColumn":178},{"ruleId":"162","severity":1,"message":"211","line":3,"column":180,"nodeType":"164","messageId":"165","endLine":3,"endColumn":197},{"ruleId":"162","severity":1,"message":"222","line":3,"column":199,"nodeType":"164","messageId":"165","endLine":3,"endColumn":210},{"ruleId":"162","severity":1,"message":"223","line":5,"column":8,"nodeType":"164","messageId":"165","endLine":5,"endColumn":13},{"ruleId":"162","severity":1,"message":"191","line":2,"column":27,"nodeType":"164","messageId":"165","endLine":2,"endColumn":35},{"ruleId":"162","severity":1,"message":"220","line":3,"column":17,"nodeType":"164","messageId":"165","endLine":3,"endColumn":23},{"ruleId":"162","severity":1,"message":"210","line":3,"column":25,"nodeType":"164","messageId":"165","endLine":3,"endColumn":38},{"ruleId":"162","severity":1,"message":"221","line":3,"column":40,"nodeType":"164","messageId":"165","endLine":3,"endColumn":53},{"ruleId":"162","severity":1,"message":"211","line":3,"column":55,"nodeType":"164","messageId":"165","endLine":3,"endColumn":72},{"ruleId":"162","severity":1,"message":"222","line":3,"column":74,"nodeType":"164","messageId":"165","endLine":3,"endColumn":85},{"ruleId":"162","severity":1,"message":"224","line":3,"column":87,"nodeType":"164","messageId":"165","endLine":3,"endColumn":91},{"ruleId":"162","severity":1,"message":"225","line":3,"column":93,"nodeType":"164","messageId":"165","endLine":3,"endColumn":103},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'HashRouter' is defined but never used.","Identifier","unusedVar","'setnoEsta' is assigned a value but never used.","'setcargando' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ruta' and 'turno'. Either include them or remove the dependency array. You can also do a functional update 'setturno(t => ...)' if you only need 'turno' in the 'setturno' call.","ArrayExpression",["228"],"React Hook useEffect has a missing dependency: 'alertaDNI'. Either include it or remove the dependency array.",["229"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'x' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["226"],["227"],"React Hook useEffect has missing dependencies: 'turno.created_at' and 'turno.fecha'. Either include them or remove the dependency array.",["230"],"React Hook useEffect has a missing dependency: 'ruta'. Either include it or remove the dependency array.",["231"],"'open' is assigned a value but never used.","'pwd_olvidada' is assigned a value but never used.","'setpwd_olvidada' is assigned a value but never used.","'useState' is defined but never used.","'classes' is assigned a value but never used.","'setmensaje' is assigned a value but never used.",["232"],"React Hook useEffect has a missing dependency: 'persona'. Either include it or remove the dependency array. You can also do a functional update 'setpersona(p => ...)' if you only need 'persona' in the 'setpersona' call.",["233"],["234"],"'setauth' is assigned a value but never used.",["235"],"'alertaDNI' is assigned a value but never used.","'setalertaDNI' is assigned a value but never used.","'deporteACargar' is assigned a value but never used.","'setdeporteACargar' is assigned a value but never used.","'setnoGuardado' is assigned a value but never used.","'setjugador' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'deporte' and 'ruta'. Either include them or remove the dependency array. You can also do a functional update 'setdeporte(d => ...)' if you only need 'deporte' in the 'setdeporte' call.",["236"],"'asignarAsistencia' is defined but never used.",["237"],"'DialogActions' is defined but never used.","'DialogContentText' is defined but never used.","'useEffect' is defined but never used.","'InputLabel' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Dialog' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'Alert' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"238","fix":"246"},{"desc":"247","fix":"248"},{"desc":"242","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"244","fix":"254"},"Update the dependencies array to be: [ruta, turno]",{"range":"255","text":"256"},"Update the dependencies array to be: [alertaDNI, tildado]",{"range":"257","text":"258"},"Update the dependencies array to be: [turno.created_at, turno.fecha]",{"range":"259","text":"260"},"Update the dependencies array to be: [ruta]",{"range":"261","text":"262"},{"range":"263","text":"256"},"Update the dependencies array to be: [persona, persona.domicilio]",{"range":"264","text":"265"},{"range":"266","text":"260"},"Update the dependencies array to be: [ruta, usuario]",{"range":"267","text":"268"},"Update the dependencies array to be: [deporte, ruta]",{"range":"269","text":"270"},{"range":"271","text":"262"},[7316,7318],"[ruta, turno]",[7407,7416],"[alertaDNI, tildado]",[1589,1591],"[turno.created_at, turno.fecha]",[6547,6549],"[ruta]",[9221,9223],[11050,11069],"[persona, persona.domicilio]",[1691,1693],[8612,8621],"[ruta, usuario]",[7831,7833],"[deporte, ruta]",[6410,6412]]