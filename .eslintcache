[{"F:\\Piletas\\piletas\\src\\index.js":"1","F:\\Piletas\\piletas\\src\\App.js":"2","F:\\Piletas\\piletas\\src\\reportWebVitals.js":"3","F:\\Piletas\\piletas\\src\\Estilos.js":"4","F:\\Piletas\\piletas\\src\\Componentes\\formulario.js":"5","F:\\Piletas\\piletas\\src\\Componentes\\listado.js":"6","F:\\Piletas\\piletas\\src\\Componentes\\notificacion.js":"7","F:\\Piletas\\piletas\\src\\Componentes\\alerta.js":"8","F:\\Piletas\\piletas\\src\\Componentes\\sesion.js":"9","F:\\Piletas\\piletas\\src\\Componentes\\nav.js":"10"},{"size":514,"mtime":1612218146755,"results":"11","hashOfConfig":"12"},{"size":3898,"mtime":1612412974947,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1611795282164,"results":"14","hashOfConfig":"12"},{"size":3510,"mtime":1612402448823,"results":"15","hashOfConfig":"12"},{"size":24004,"mtime":1612412558426,"results":"16","hashOfConfig":"12"},{"size":6991,"mtime":1612411120774,"results":"17","hashOfConfig":"12"},{"size":1063,"mtime":1612412673826,"results":"18","hashOfConfig":"12"},{"size":896,"mtime":1612396451807,"results":"19","hashOfConfig":"12"},{"size":4451,"mtime":1612411135512,"results":"20","hashOfConfig":"12"},{"size":1506,"mtime":1612412962312,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z21pu",{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Piletas\\piletas\\src\\index.js",[],"F:\\Piletas\\piletas\\src\\App.js",["46","47"],"F:\\Piletas\\piletas\\src\\reportWebVitals.js",[],"F:\\Piletas\\piletas\\src\\Estilos.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\formulario.js",["48","49","50","51","52","53","54"],"import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {LinearProgress,InputLabel, Checkbox,FormControlLabel, Typography, Radio, RadioGroup, TextField, FormControl, Button, Paper, Grid, Select, MenuItem, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport Cargando from '@material-ui/core/LinearProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Estilos from '../Estilos.js';\r\nimport Notificacion from './notificacion.js'\r\nimport AlertaMensaje from './alerta.js'\r\n\r\n\r\n//Componente utilizado para crear o modificar publicaciones o solicitudes de servicios\r\nexport default function Inicio({ruta}) {\r\n    const [siguiente, setsiguiente] = useState(false);\r\n    \r\n    return ( \r\n        siguiente?<Formulario setsiguiente={setsiguiente} ruta={ruta}/>:<Condiciones setsiguiente={setsiguiente}/>\r\n    );\r\n}\r\n\r\nconst Condiciones = ({setsiguiente}) => {\r\n    const classes = Estilos();\r\n\r\n    return (\r\n        <div className={classes.fondo}>\r\n            <Paper elevation={3} style={{padding: \"20px\", background:\"lightblue\", maxWidth:\"85%\"}} className=\"Fondo\">\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n                            Condiciones para realizar una reserva para las piletas\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <ul style={{textAlign:\"left\",textJustify:\"auto\"}}>\r\n                            <li>Para poder realizar una reserva, debe tener un domicilio real en San Bernardo que pueda ser comprobado mediante su DNI.</li>\r\n                            <li>Los días habilitados para asistir al complejo son de martes a domingo. El horario de apertura del complejo es de 14 a 00 hs, y el sector de las piletas cierra a las 20 hs.</li>\r\n                            <li>Al momento de ingresar al complejo, debe presentar su DNI y un certificado de buena salud expedido por un organismo público.</li>\r\n                            <li>Luego de realizado una reserva, deberá esperar 48 horas para poder realizar otra.</li>\r\n                            <li>La entrada al complejo es totalmente gratuita.</li>\r\n                            <li>En caso de no poseer un domicilio en San Bernardo y estar vacacionando en nuestra ciudad, comunicate al correo mainardcin@gmail.com explicando tu situación para que te podamos ofrecer una solución.</li>\r\n                        </ul>       \r\n                    </Grid>      \r\n                    <Button className={classes.botones} onClick={()=>{setsiguiente(true)}} size=\"large\" variant=\"contained\" color=\"secondary\">Siguiente</Button>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Alerta({funcionAceptar, persona, turno}) {\r\n    const [open, setOpen] = useState(true);\r\n    const [cargando, setcargando] = useState(false)\r\n    const [noEsta, setnoEsta] = useState(persona.nombre===\"\")\r\n    //Ejecutamos la función que se pasa como parámetro\r\n    const handleClose = (boole) => {\r\n      setcargando(true)\r\n      funcionAceptar(boole)\r\n      setcargando(false)\r\n      setOpen(false);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          onClose={()=>{handleClose(false)}}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{noEsta?\"DNI no encontrado\":\"Por favor, confirme que sus datos sean correctos\"}</DialogTitle>\r\n          <DialogContent>\r\n            {!noEsta && <DialogContentText id=\"alert-dialog-description\">\r\n                Nombre: {persona.nombre}<br/>\r\n                Apellido: {persona.apellido}<br/>\r\n                DNI: {persona.dni}<br/>\r\n                Telefono: {persona.telefono}<br/>\r\n                {persona.domicilio===\"San Bernardo\"?\"Localidad: \":\"Situación: \"}{persona.domicilio}<br/>\r\n                Fecha reservada: {turno.fecha}<br/>\r\n                Área: {turno.area===0?\"Pileta\":(turno.area===1?\"Camping\":\"Camping y pileta\")}\r\n            </DialogContentText>}\r\n            {noEsta && <DialogContentText id=\"alert-dialog-description\">\r\n                El DNI introducido no se encuentra registrado. Por favor, ingrese todos sus datos destildando la opción \"Ya he realizado una reserva alguna vez\".\r\n            </DialogContentText>}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={()=>{handleClose(false)}} variant=\"contained\" color=\"secondary\">\r\n              Cancelar\r\n            </Button>\r\n            <Button onClick={()=>{handleClose(true)}} variant=\"contained\" style={{background:\"lightgreen\"}} disabled={noEsta} autoFocus>\r\n              Confirmar\r\n            </Button>\r\n            {cargando && <Cargando/>}\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n\r\nconst Formulario = ({setsiguiente, ruta, usuario}) =>{\r\n    const classes = Estilos();\r\n\r\n    const [cargando, setcargando] = useState(false);\r\n    const [abrirConfirmacion, setabrirConfirmacion] = useState(false);\r\n    const [alertaDNI, setalertaDNI] = useState(false);\r\n    const [tildado, settildado] = useState(false);\r\n    const [mensaje, setmensaje] = useState(\"\");\r\n    const [tildadoCovid, settildadoCovid] = useState(false);\r\n    const [disponibles, setdisponibles] = useState(-1);\r\n    const [esperaDisponible, setesperaDisponible] = useState(false);\r\n    const [notificar, setnotificar] = useState(false);\r\n    const [fechaHoy, setfechaHoy] = useState(\"\");\r\n    const [turista, setturista] = useState(false);\r\n    const [abrirAlerta, setabrirAlerta] = useState(false);\r\n\r\n    const [cargandoSolicitar, setcargandoSolicitar] = useState(false);\r\n\r\n    //Datos de la pagina\r\n    const [persona, setpersona] = useState({\r\n        dni: \"\",\r\n        nombre:\"\",\r\n        apellido: \"\",\r\n        telefono: \"\",\r\n        domicilio: \"San Bernardo\",\r\n        permitido: true,\r\n    }); \r\n    \r\n    const [turno, setturno] = useState({\r\n        fecha: \"\",\r\n        area: 2,\r\n        asistencia: false,\r\n        persona: null\r\n    });\r\n\r\n    useEffect(()=>{\r\n        let date_ = new Date();\r\n        let mes = date_.getMonth() + 1\r\n        if(mes < 10)\r\n            mes = \"0\"+mes\r\n        let dia = date_.getDay()\r\n        if(dia < 10)\r\n            dia = \"0\"+dia\r\n        \r\n        setfechaHoy(date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n        setturno({\r\n            ...turno,\r\n            fecha: date_.getFullYear()+\"-\"+mes+\"-\"+dia\r\n        })\r\n\r\n        setesperaDisponible(true)\r\n        axios.get(ruta+'/turnos/count?fecha='+date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n        .then(response => {\r\n            setdisponibles(100-response.data)\r\n            setesperaDisponible(false)\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        });\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if (alertaDNI)\r\n            setalertaDNI(false)\r\n    },[tildado])\r\n\r\n    function modificarInput(e){\r\n        if (alertaDNI){\r\n            setalertaDNI(false)\r\n        }\r\n        setpersona({\r\n            ...persona,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function seleccionarArea(e){\r\n        setturno({\r\n            ...turno,\r\n            area: Number(e.target.value)\r\n        })\r\n    }\r\n\r\n    function limpiarVariables(){\r\n        setpersona({\r\n            dni: \"\",\r\n            nombre:\"\",\r\n            apellido: \"\",\r\n            telefono: \"\",\r\n            domicilio: \"San Bernardo\",\r\n            permitido: true,\r\n        });\r\n\r\n        setturno({\r\n            fecha: turno.fecha,\r\n            area: 2,\r\n            asistencia: false,\r\n            persona: null\r\n        });\r\n    }\r\n\r\n    function alertaPregunta(e){\r\n        e.preventDefault();\r\n        setcargandoSolicitar(true)\r\n\r\n        axios.get(ruta+'/personas?dni='+persona.dni)\r\n        .then(response => {\r\n            if(response.data.length === 0 || tildado===true){\r\n                if (tildado && response.data.length !== 0)\r\n                    setpersona({\r\n                        dni: response.data[0].dni,\r\n                        nombre: response.data[0].nombre,\r\n                        apellido: response.data[0].apellido,\r\n                        telefono: response.data[0].telefono,\r\n                        domicilio: response.data[0].domicilio?\"San Bernardo\":\"Soy turista\",\r\n                        permitido: response.data[0].permitido,\r\n                    })\r\n                setabrirConfirmacion(true)\r\n            }else{\r\n                setalertaDNI(true)\r\n                setcargandoSolicitar(false)\r\n            }\r\n\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        });\r\n    }\r\n\r\n    function solicitarTurno(boole){\r\n        setabrirConfirmacion(false)\r\n        \r\n        if(boole){\r\n            let aux = persona.domicilio===\"San Bernardo\"\r\n            let persona_aux = persona;\r\n            persona_aux.domicilio = aux;\r\n            persona_aux.permitido = aux;\r\n\r\n            axios.get(ruta+'/personas?dni='+persona.dni)\r\n            .then(response => {\r\n                if(response.data.length === 0){\r\n                    axios.post(ruta+'/personas', persona_aux)\r\n                    .then(response => {\r\n                        setcargandoSolicitar(false)\r\n\r\n                        let turno_aux = turno;\r\n                        turno_aux.persona = response.data.id;\r\n                        \r\n                        axios.post(ruta+'/turnos', turno_aux)\r\n                        .then(response => {\r\n                            setabrirAlerta(true)\r\n                            limpiarVariables()\r\n                            setdisponibles(disponibles-1)\r\n                        }).catch(error => {\r\n                            console.log(error.response)\r\n                        });\r\n\r\n                    }).catch(error => {\r\n                        setcargandoSolicitar(true)\r\n                        console.log(error.response)\r\n                    });\r\n                }else{\r\n                    let turno_aux = turno;\r\n                    turno_aux.persona = response.data[0].id;\r\n\r\n                    let posicion = response.data[0].turnos.length -1\r\n                    let ultTurno = new Date(response.data[0].turnos[posicion].fecha+\" 00:00:00\");\r\n                    let dosDiasDesp = Date.parse(ultTurno) + 1000*60*60*48 //48 horas a milisegundos\r\n\r\n                    if (dosDiasDesp>Date.now() && response.data[0].turnos.length!==0){\r\n                        setcargandoSolicitar(false)\r\n                        if (ultTurno<Date.now()){\r\n                            let permitido = new Date(dosDiasDesp)\r\n                            setmensaje(\"Debido a su último turno expedido, puede volver a realizar una reserva el día \"+permitido.getDay()+\"/\"+(permitido.getMonth()+1)+\"/\"+permitido.getFullYear())\r\n                        }else{\r\n                            let dia = ultTurno.getDate()\r\n                            let mes = ultTurno.getMonth() + 1\r\n                            let anio = ultTurno.getFullYear()\r\n\r\n                            if(mes < 10)\r\n                                mes = \"0\"+mes\r\n                            if (dia <10)\r\n                                dia = \"0\"+dia\r\n                            setmensaje(\"Usted tiene un turno activo para la fecha \"+`${dia}-${mes}-${anio}`)\r\n                        }\r\n                        setnotificar(true)\r\n                    }else{\r\n                        axios.post(ruta+'/turnos', turno_aux)\r\n                        .then(response => {\r\n                            setabrirAlerta(true)\r\n                            limpiarVariables()\r\n                            setcargandoSolicitar(false)\r\n                            setdisponibles(disponibles-1)\r\n                        }).catch(error => {\r\n                            setcargandoSolicitar(false)\r\n                            console.log(error.response)\r\n                        });\r\n                    }\r\n                }\r\n            }).catch(error => {\r\n                setcargandoSolicitar(false)\r\n                console.log(error.response)\r\n            });\r\n        }else{\r\n            setcargandoSolicitar(false)\r\n        }\r\n    }\r\n\r\n    function seleccionarFecha(e){\r\n        setturno({...turno, fecha: e.target.value})\r\n        setesperaDisponible(true)\r\n        let _fecha = new Date(e.target.value)\r\n        if (_fecha.getUTCDay()!==1){\r\n            axios.get(ruta+'/turnos/count?fecha='+e.target.value)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setdisponibles(100-response.data)\r\n                setesperaDisponible(false)\r\n            }).catch(error => {\r\n                console.log(error.response)\r\n            });\r\n        }else{\r\n            setdisponibles(-2)//Cuando se selecciona un lunes\r\n            setesperaDisponible(false)\r\n        }\r\n    }\r\n    \r\n    function x(e){\r\n        const re = /^[0-9\\b]+$/;\r\n        if (e.target.value === '' || re.test(e.target.value)) {\r\n            this.setState({value: e.target.value})\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.fondo}>\r\n            <Paper elevation={3} style={{padding: \"10px\", background:\"lightblue\"}}>\r\n                <form onSubmit={alertaPregunta}>\r\n                    <FormControl color=\"primary\" fullWidth>\r\n                        <Grid className={classes.pantallaMedia} container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n                                    Turnos de pileta\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                                <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={tildado}\r\n                                        onChange={()=>{settildado(!tildado)}}\r\n                                        name=\"checkedF\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Ya he realizado una reserva alguna vez\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.dni}\r\n                                name=\"dni\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"DNI\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>\r\n\r\n                            \r\n                            {!tildado && <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.nombre}\r\n                                name=\"nombre\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"Nombre\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>}\r\n\r\n                            {!tildado && <Grid item lg={3} md={3} sm={12} xs={12}>\r\n                                <TextField\r\n                                onChange={modificarInput}\r\n                                value={persona.apellido}\r\n                                name=\"apellido\"\r\n                                className={classes.inputAncho}\r\n                                id=\"filled-basic\"\r\n                                label=\"Apellido\"\r\n                                variant=\"filled\"\r\n                                maxLength={50}\r\n                                required/>\r\n                            </Grid>}\r\n                                \r\n                            {!tildado && <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <TextField\r\n                                    onChange={modificarInput}\r\n                                    value={persona.telefono}\r\n                                    name=\"telefono\"\r\n                                    className={classes.inputAncho}\r\n                                    id=\"filled-basic\"\r\n                                    label=\"Número de celular\"\r\n                                    variant=\"filled\"\r\n                                    maxLength={50}\r\n                                />\r\n                            </Grid>}\r\n\r\n                            {!tildado && <Grid item lg={2} md={2} sm={12} xs={12}>\r\n                                <FormControl className={classes.inputAncho}>\r\n                                    <InputLabel id=\"demo-simple-select-label\" style={{margin:\"7px 10px\"}}>Domicilio</InputLabel>\r\n                                    <Select\r\n                                        value={persona.domicilio}\r\n                                        name=\"domicilio\"\r\n                                        onChange={modificarInput}\r\n                                        id=\"domicilio\"\r\n                                        variant=\"filled\"\r\n                                        required\r\n                                    >\r\n                                        <MenuItem value=\"San Bernardo\" onClick={()=>setturista(false)}>San Bernardo</MenuItem>\r\n                                        <MenuItem value=\"Soy turista\" onClick={()=>setturista(true)}>Soy turista</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>}\r\n\r\n                            {turista && <Grid item lg={12} md={12} sm={12} xs={12} align=\"center\">\r\n                            <Alert variant=\"filled\" severity=\"info\">\r\n                                Si usted no posee un domicilio en San Bernardo y se encuentra vacacionando en nuestra localidad, debe contactarse al correo mainardcin@gmail.com para terminar de gestionar su turno.\r\n                            </Alert></Grid>}\r\n\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <input\r\n                                className={classes.inputAncho}\r\n                                onChange={seleccionarFecha}\r\n                                id=\"date\"\r\n                                type=\"date\"\r\n                                min={fechaHoy}\r\n                                required\r\n                                value={turno.fecha}\r\n                                style={{boxSizing: \"border-box\", padding:\"0px 10px\",background:\"rgba(0,0,0,.1)\", borderRadius:\"5px\",border:\"none\"}}/>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                {esperaDisponible && <LinearProgress color=\"secondary\"/>}\r\n                                <Typography color=\"secondary\"> {disponibles===-1?\"\":(disponibles===-2?\"Los días lunes no se puede reservar.\":`${disponibles} lugares disponibles`)} </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                                <FormControl component=\"fieldset\">\r\n                                    <RadioGroup aria-label=\"Turno\" name=\"turno\" value={String(turno.area)} onChange={seleccionarArea}>\r\n                                    <FormControlLabel value={\"0\"} control={<Radio />} label=\"Pileta\" />\r\n                                    <FormControlLabel value={\"1\"} control={<Radio />} label=\"Camping\" />\r\n                                    <FormControlLabel value={\"2\"} control={<Radio />} label=\"Ambos\" />\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <br/>\r\n                            <Typography variant=\"h4\" component=\"h4\" align=\"center\">\r\n                                Declaracion Jurada de Síntomas de COVID-19\r\n                            </Typography>                                \r\n\r\n                            <Grid item sm={12}>\r\n                                <img src=\"sintomas.jpg\" width=\"100%\"></img>\r\n                                <br/>\r\n                                <br/>\r\n                                <Typography fontWeight=\"fontWeightBold\" align=\"justify\">\r\n                                    Si tenés dos o más de los siguientes síntomas: fiebre de 37,5°C, tos, dolor de garganta, dificultad respiratoria, dolor muscular, cefalea, diarrea y/o vómitos, o si tenés solo pérdida brusca de gusto u olfato, comunicate al cel 3735604561 de 09 a 11hs y de 17 a 20 hs sin excepción.\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                            <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={tildadoCovid}\r\n                                    onChange={()=>{settildadoCovid(!tildadoCovid)}}\r\n                                    name=\"tildadoCovid\"\r\n                                    required\r\n                                />\r\n                            }\r\n                            label=\"Declaro bajo juramento que no tengo síntomas de COVID-19\"\r\n                            />\r\n                            <Grid item xs={12} className={classes.inputAncho}>\r\n                                {cargando && <Cargando/>}\r\n                            </Grid>\r\n\r\n                            \r\n                            <Grid item xs={12} align=\"center\" style={{margin:\"15px\"}}>\r\n                                {cargandoSolicitar && <LinearProgress color=\"secondary\"/>}\r\n                            </Grid>\r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.botones} onClick={()=>{setsiguiente(false)}} size=\"large\" variant=\"contained\" color=\"secondary\">Atras</Button>\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={6} align=\"center\">\r\n                                <Button className={classes.botones} disabled={cargando || disponibles<=0} type=\"submit\" size=\"large\" variant=\"contained\" style={{background:\"lightgreen\"}}>Solicitar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {abrirConfirmacion && <Alerta funcionAceptar={solicitarTurno} persona={persona} turno={turno}/>}\r\n                        {notificar && <Notificacion funcionAceptar={setnotificar} mensaje={mensaje}/>}\r\n                        <AlertaMensaje mensaje={\"¡Turno creado exitosamente!\"} abrir={abrirAlerta} setabrir={setabrirAlerta}/>\r\n                    </FormControl>\r\n                </form>\r\n                {alertaDNI && <Alert variant=\"filled\" severity=\"error\">\r\n                    El DNI ya se encuentra en uso, seleccione \"Ya he realizado una reserva alguna vez\" para continuar con la reserva.\r\n                </Alert>}\r\n            </Paper>\r\n        </div>\r\n    )\r\n}",["55","56"],"F:\\Piletas\\piletas\\src\\Componentes\\listado.js",["57"],"import React,{useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {Box, Collapse, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Button, Typography, Paper, Grid } from '@material-ui/core';\r\nimport Cargando from '@material-ui/core/LinearProgress';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Estilos from '../Estilos.js';\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {    '& > *': {\r\n      borderBottom: 'unset',\r\n    },\r\n  },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction Row({turno, ruta, usuario}) {\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useRowStyles();\r\n  const [Turno, setTurno] = useState(turno);\r\n\r\n  let auth = 'Bearer '+usuario.jwt;\r\n\r\n  function asignarAsistencia(){\r\n    let asis = !Turno.asistencia;\r\n    axios.put(ruta+'/turnos/'+Turno.id,{\r\n      asistencia: asis\r\n    },{headers: {'Authorization': auth}})\r\n    .then(response => {\r\n      console.log(response.data)\r\n      setTurno({\r\n        ...Turno,\r\n        asistencia: !Turno.asistencia\r\n      })\r\n    }).catch(error => {\r\n      console.log(error.response)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledTableRow className={classes.root}>\r\n        <StyledTableCell align=\"left\" component=\"th\" scope=\"row\" onClick={() => setOpen(!open)}>\r\n          <IconButton aria-label=\"expand row\" size=\"small\" >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n          {`${Turno.persona.apellido} ${Turno.persona.nombre}`}\r\n        </StyledTableCell>\r\n        <StyledTableCell align=\"center\">{Turno.persona.dni}</StyledTableCell>\r\n        <StyledTableCell align=\"center\">\r\n          <Button size=\"small\" variant=\"contained\" color={Turno.asistencia?\"primary\":\"secondary\"} onClick={asignarAsistencia}>{Turno.asistencia?\"SI\":\"NO\"}</Button>\r\n        </StyledTableCell>\r\n      </StyledTableRow>\r\n      <StyledTableRow>\r\n        <StyledTableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              <Grid container>\r\n                <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                  <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    Teléfono: {Turno.persona.telefono!==\"\"?Turno.persona.telefono:\"N/A\"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                  <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    {Turno.persona.domicilio?\" Localidad: San Bernardo\":\" Situación: Turista\"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item lg={4} md={4} sm={12} xs={12} align=\"center\">\r\n                  <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    Área: {Turno.persona.area===0?\"Pileta\":Turno.persona.area===1?\"Camping\":\"Pileta y camping\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Collapse>\r\n        </StyledTableCell>\r\n      </StyledTableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default function Listado({ruta,usuario}) {\r\n  const classes = Estilos();\r\n  const [fechaHoy, setfechaHoy] = useState(\"\");\r\n  const [mensaje, setmensaje] = useState(\"\");\r\n  const [esperaDisponible, setesperaDisponible] = useState(false);\r\n  const [turnos, setturnos] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    let date_ = new Date();\r\n    let mes = date_.getMonth() + 1\r\n    if(mes < 10)\r\n        mes = \"0\"+mes\r\n    let dia = date_.getDay()\r\n    if(dia < 10)\r\n        dia = \"0\"+dia\r\n    \r\n    setfechaHoy(date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n\r\n    setesperaDisponible(true)\r\n    axios.get(ruta+'/turnos?fecha='+date_.getFullYear()+\"-\"+mes+\"-\"+dia)\r\n    .then(response => {\r\n        setturnos(response.data)\r\n        setesperaDisponible(false)\r\n    }).catch(error => {\r\n        console.log(error.response)\r\n    });\r\n  },[])\r\n\r\n  function seleccionarFecha(e){\r\n    setesperaDisponible(true)\r\n    setfechaHoy(e.target.value)\r\n    if (mensaje!==\"\")\r\n      setmensaje(\"\")\r\n    let _fecha = new Date(e.target.value)\r\n    if (_fecha.getUTCDay()!==1){\r\n        axios.get(ruta+'/turnos?fecha='+e.target.value)\r\n        .then(response => {\r\n            console.log(response.data);\r\n            setturnos([])\r\n            setturnos(response.data)\r\n            if (response.data.length===0)\r\n              setmensaje(\"No existen reservas para el día seleccionado.\")\r\n            setesperaDisponible(false)\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n        });\r\n    }else{\r\n        setturnos([])\r\n        setmensaje(\"Los días lunes no se pueden realizar reservas.\")\r\n        setesperaDisponible(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.fondo2} style={{margin:\"auto\"}}>\r\n      <Paper elevation={3} style={{width:\"100%\",margin:\"10px auto\",padding: \"20px\", background:\"lightblue\"}} className=\"Fondo\">\r\n        <Typography variant=\"h3\" component=\"h1\" align=\"center\">\r\n            Administrar turnos\r\n        </Typography>\r\n        <Typography align=\"left\">\r\n            Seleccione una fecha:\r\n        </Typography>\r\n        <input\r\n        className={classes.inputAncho}\r\n        id=\"date\"\r\n        type=\"date\"\r\n        value={fechaHoy}\r\n        onChange={seleccionarFecha}\r\n        style={{boxSizing: \"border-box\", padding:\"0px 15px\", fontSize:\"15px\", background:\"rgba(0,0,0,.1)\", borderRadius:\"5px\",border:\"none\"}}/>\r\n\r\n        {esperaDisponible && <Cargando color=\"secondary\"/>}\r\n        {mensaje===\"\"?(<TableContainer component={Paper} style={{maxWidth:\"1000px\",margin:\"10px auto\"}}>\r\n          <Table aria-label=\"collapsible table\">\r\n            <TableHead>\r\n              <StyledTableRow>\r\n                <StyledTableCell align=\"left\">Apellido y nombre</StyledTableCell>\r\n                <StyledTableCell align=\"center\">DNI</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Asistencia</StyledTableCell>\r\n              </StyledTableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {turnos.map((turno,i) => (\r\n                <Row key={i} turno={turno} ruta={ruta} usuario={usuario}/>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>):(<Typography variant=\"h4\"><br/>{mensaje}</Typography>)}\r\n      </Paper>\r\n    </div>\r\n   \r\n  );\r\n}","F:\\Piletas\\piletas\\src\\Componentes\\notificacion.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\alerta.js",[],"F:\\Piletas\\piletas\\src\\Componentes\\sesion.js",["58","59","60","61","62"],"import React, { useState} from 'react';\r\n//Material UI \r\nimport {Grid, Link as LinkMUI,  LinearProgress, Typography, TextField, Hidden, Button, Divider, } from '@material-ui/core';\r\n\r\n//Librerias\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from 'axios'\r\n\r\nimport Estilos from '../Estilos.js'\r\nimport {useHistory } from \"react-router-dom\";\r\n\r\n//Componente utilizado para cuando se quiere iniciar sesión\r\nexport default function IniciarSesion({ruta,setusuario}) {\r\n  const classes = Estilos();\r\n  let history = useHistory();\r\n  const [open, setOpen] = useState(false);\r\n  const [cargando, setcargando] = useState(false);\r\n  const [alerta, setalerta] = useState(\"\");\r\n  const [pwd_olvidada, setpwd_olvidada] = useState(false);\r\n\r\n  //Los datos inician vacíos\r\n  const [datos, setdatos] = useState({\r\n    email:\"\",\r\n    contrasena:\"\"\r\n  });\r\n  \r\n  //Ejecutado cada vez que se ingresa algún valor en los campos\r\n  const cambiarInput = (e) =>{\r\n    if (alerta!==\"\")\r\n        setalerta(\"\")\r\n    let valor = e.target.value;\r\n    let campo = e.target.name;\r\n    setdatos({\r\n        ...datos,\r\n        [campo]: valor\r\n    })        \r\n  }\r\n  \r\n  //Función ejecutada al presionar el botón de iniciar sesión\r\n  const iniciarSesion = () =>{\r\n    setcargando(true)\r\n    if (alerta!==\"\")\r\n        setalerta(\"\")\r\n\r\n    if (datos.email===\"\" || datos.contrasena===\"\"){\r\n        setalerta('Faltan rellenar campos');\r\n        setcargando(false)\r\n    }\r\n    axios\r\n    .post(ruta+\"/auth/local/\", {\r\n    identifier: datos.email,\r\n    password: datos.contrasena\r\n    })\r\n    .then(response => {\r\n        console.log(response.data)\r\n        setusuario(response.data)\r\n\r\n        localStorage.setItem('datosLocal', JSON.stringify({\r\n            jwt: response.data.jwt,\r\n            datosSesion: response.data.user\r\n        }));\r\n        \r\n        setcargando(false)\r\n        setOpen(false)\r\n\r\n        history.push(\"/listar\")\r\n    })\r\n    .catch(error => {\r\n    // Ocurrió un error\r\n    let err = JSON.parse(error.response.request.response).message[0].messages[0].id;\r\n    console.log(\"Error: \",err)\r\n    if(err===\"Auth.form.error.invalid\")\r\n        setalerta('Usuario/correo o contraseña incorrectos'); \r\n    setcargando(false)\r\n    });    \r\n  }\r\n\r\n  return (\r\n    <div className={classes.fondo2} style={{margin:\"auto\"}}>\r\n        <div className=\"Fondo\"  style={{maxWidth:300}}>\r\n            <Grid  container direction=\"row\" justify=\"center\"  spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h5\" component=\"h1\" align=\"center\" className={classes.form}>\r\n                      Iniciar Sesión\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                    onChange={cambiarInput}\r\n                    name=\"email\"\r\n                    value={datos.email}\r\n                    className={classes.inputAncho}\r\n                    id=\"filled-basic\"\r\n                    label=\"Usuario/Correo electrónico\"\r\n                    variant=\"filled\"\r\n                    required\r\n                />\r\n                </Grid>\r\n                <Divider/>\r\n                \r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                    onChange={cambiarInput}\r\n                    name=\"contrasena\"\r\n                    value={datos.contrasena}\r\n                    required\r\n                    type=\"password\"\r\n                    label=\"Contraseña\"\r\n                    variant=\"filled\"\r\n                    style={{marginTop:\"15px\"}}\r\n                    className={classes.inputAncho}\r\n                    />\r\n                </Grid>\r\n                \r\n                <div className={classes.inputAncho} hidden={!cargando}>\r\n                    <LinearProgress color=\"secondary\"/>\r\n                </div>\r\n\r\n                <Hidden xlDown={alerta===\"\"}>\r\n                    <Typography color=\"error\">\r\n                        {alerta}\r\n                    </Typography>\r\n                </Hidden>\r\n\r\n                <Grid item xs={12} align=\"center\">\r\n                    <Button\r\n                        onClick={iniciarSesion}\r\n                        size=\"large\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\">\r\n                        Iniciar Sesión\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </div>\r\n  );\r\n}","F:\\Piletas\\piletas\\src\\Componentes\\nav.js",["63","64","65"],{"ruleId":"66","severity":1,"message":"67","line":16,"column":9,"nodeType":"68","messageId":"69","endLine":16,"endColumn":16},{"ruleId":"70","severity":1,"message":"71","line":71,"column":17,"nodeType":"72","endLine":71,"endColumn":54},{"ruleId":"66","severity":1,"message":"73","line":52,"column":20,"nodeType":"68","messageId":"69","endLine":52,"endColumn":29},{"ruleId":"66","severity":1,"message":"74","line":101,"column":22,"nodeType":"68","messageId":"69","endLine":101,"endColumn":33},{"ruleId":"75","severity":1,"message":"76","line":156,"column":7,"nodeType":"77","endLine":156,"endColumn":9,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":161,"column":7,"nodeType":"77","endLine":161,"endColumn":16,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":279,"column":84,"nodeType":"83","messageId":"84","endLine":279,"endColumn":85},{"ruleId":"66","severity":1,"message":"85","line":323,"column":14,"nodeType":"68","messageId":"69","endLine":323,"endColumn":15},{"ruleId":"70","severity":1,"message":"71","line":464,"column":33,"nodeType":"72","endLine":464,"endColumn":70},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"75","severity":1,"message":"90","line":128,"column":5,"nodeType":"77","endLine":128,"endColumn":7,"suggestions":"91"},{"ruleId":"66","severity":1,"message":"92","line":3,"column":23,"nodeType":"68","messageId":"69","endLine":3,"endColumn":30},{"ruleId":"66","severity":1,"message":"93","line":6,"column":9,"nodeType":"68","messageId":"69","endLine":6,"endColumn":13},{"ruleId":"66","severity":1,"message":"94","line":16,"column":10,"nodeType":"68","messageId":"69","endLine":16,"endColumn":14},{"ruleId":"66","severity":1,"message":"95","line":19,"column":10,"nodeType":"68","messageId":"69","endLine":19,"endColumn":22},{"ruleId":"66","severity":1,"message":"96","line":19,"column":24,"nodeType":"68","messageId":"69","endLine":19,"endColumn":39},{"ruleId":"66","severity":1,"message":"97","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":25},{"ruleId":"66","severity":1,"message":"67","line":10,"column":9,"nodeType":"68","messageId":"69","endLine":10,"endColumn":16},{"ruleId":"70","severity":1,"message":"71","line":25,"column":15,"nodeType":"72","endLine":25,"endColumn":52},"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setnoEsta' is assigned a value but never used.","'setcargando' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ruta' and 'turno'. Either include them or remove the dependency array. You can also do a functional update 'setturno(t => ...)' if you only need 'turno' in the 'setturno' call.","ArrayExpression",["98"],"React Hook useEffect has a missing dependency: 'alertaDNI'. Either include it or remove the dependency array.",["99"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'x' is defined but never used.","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"React Hook useEffect has a missing dependency: 'ruta'. Either include it or remove the dependency array.",["102"],"'LinkMUI' is defined but never used.","'Link' is defined but never used.","'open' is assigned a value but never used.","'pwd_olvidada' is assigned a value but never used.","'setpwd_olvidada' is assigned a value but never used.","'useState' is defined but never used.",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [ruta, turno]",{"range":"109","text":"110"},"Update the dependencies array to be: [alertaDNI, tildado]",{"range":"111","text":"112"},"Update the dependencies array to be: [ruta]",{"range":"113","text":"114"},[7029,7031],"[ruta, turno]",[7120,7129],"[alertaDNI, tildado]",[4553,4555],"[ruta]"]